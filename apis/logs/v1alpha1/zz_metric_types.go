// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComputeInitParameters struct {

	// (String) The type of aggregation to use. This field can't be updated after creation. Valid values are count, distribution.
	// The type of aggregation to use. This field can't be updated after creation. Valid values are `count`, `distribution`.
	AggregationType *string `json:"aggregationType,omitempty" tf:"aggregation_type,omitempty"`

	// (Boolean) Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an aggregation_type of distribution.
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an `aggregation_type` of distribution.
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type ComputeObservation struct {

	// (String) The type of aggregation to use. This field can't be updated after creation. Valid values are count, distribution.
	// The type of aggregation to use. This field can't be updated after creation. Valid values are `count`, `distribution`.
	AggregationType *string `json:"aggregationType,omitempty" tf:"aggregation_type,omitempty"`

	// (Boolean) Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an aggregation_type of distribution.
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an `aggregation_type` of distribution.
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type ComputeParameters struct {

	// (String) The type of aggregation to use. This field can't be updated after creation. Valid values are count, distribution.
	// The type of aggregation to use. This field can't be updated after creation. Valid values are `count`, `distribution`.
	// +kubebuilder:validation:Optional
	AggregationType *string `json:"aggregationType" tf:"aggregation_type,omitempty"`

	// (Boolean) Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an aggregation_type of distribution.
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an `aggregation_type` of distribution.
	// +kubebuilder:validation:Optional
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type GroupByInitParameters struct {

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the log-based metric will be aggregated over.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) Name of the tag that gets created.
	// Name of the tag that gets created.
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type GroupByObservation struct {

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the log-based metric will be aggregated over.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) Name of the tag that gets created.
	// Name of the tag that gets created.
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type GroupByParameters struct {

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the log-based metric will be aggregated over.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// (String) Name of the tag that gets created.
	// Name of the tag that gets created.
	// +kubebuilder:validation:Optional
	TagName *string `json:"tagName" tf:"tag_name,omitempty"`
}

type MetricFilterInitParameters struct {

	// following the log search syntax.
	// The search query - following the log search syntax.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type MetricFilterObservation struct {

	// following the log search syntax.
	// The search query - following the log search syntax.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type MetricFilterParameters struct {

	// following the log search syntax.
	// The search query - following the log search syntax.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type MetricInitParameters struct {

	// based metric. This field can't be updated after creation. (see below for nested schema)
	// The compute rule to compute the log-based metric. This field can't be updated after creation.
	Compute []ComputeInitParameters `json:"compute,omitempty" tf:"compute,omitempty"`

	// based metric filter. Logs matching this filter will be aggregated in this metric. (see below for nested schema)
	// The log-based metric filter. Logs matching this filter will be aggregated in this metric.
	Filter []MetricFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block Set) The rules for the group by. (see below for nested schema)
	// The rules for the group by.
	GroupBy []GroupByInitParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// based metric. This field can't be updated after creation.
	// The name of the log-based metric. This field can't be updated after creation.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MetricObservation struct {

	// based metric. This field can't be updated after creation. (see below for nested schema)
	// The compute rule to compute the log-based metric. This field can't be updated after creation.
	Compute []ComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// based metric filter. Logs matching this filter will be aggregated in this metric. (see below for nested schema)
	// The log-based metric filter. Logs matching this filter will be aggregated in this metric.
	Filter []MetricFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block Set) The rules for the group by. (see below for nested schema)
	// The rules for the group by.
	GroupBy []GroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// based metric. This field can't be updated after creation.
	// The name of the log-based metric. This field can't be updated after creation.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MetricParameters struct {

	// based metric. This field can't be updated after creation. (see below for nested schema)
	// The compute rule to compute the log-based metric. This field can't be updated after creation.
	// +kubebuilder:validation:Optional
	Compute []ComputeParameters `json:"compute,omitempty" tf:"compute,omitempty"`

	// based metric filter. Logs matching this filter will be aggregated in this metric. (see below for nested schema)
	// The log-based metric filter. Logs matching this filter will be aggregated in this metric.
	// +kubebuilder:validation:Optional
	Filter []MetricFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block Set) The rules for the group by. (see below for nested schema)
	// The rules for the group by.
	// +kubebuilder:validation:Optional
	GroupBy []GroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// based metric. This field can't be updated after creation.
	// The name of the log-based metric. This field can't be updated after creation.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// MetricSpec defines the desired state of Metric
type MetricSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MetricParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MetricInitParameters `json:"initProvider,omitempty"`
}

// MetricStatus defines the observed state of Metric.
type MetricStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MetricObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Metric is the Schema for the Metrics API. Resource for interacting with the logs_metric API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Metric struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compute) || (has(self.initProvider) && has(self.initProvider.compute))",message="spec.forProvider.compute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filter) || (has(self.initProvider) && has(self.initProvider.filter))",message="spec.forProvider.filter is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   MetricSpec   `json:"spec"`
	Status MetricStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetricList contains a list of Metrics
type MetricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Metric `json:"items"`
}

// Repository type metadata.
var (
	Metric_Kind             = "Metric"
	Metric_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Metric_Kind}.String()
	Metric_KindAPIVersion   = Metric_Kind + "." + CRDGroupVersion.String()
	Metric_GroupVersionKind = CRDGroupVersion.WithKind(Metric_Kind)
)

func init() {
	SchemeBuilder.Register(&Metric{}, &MetricList{})
}
