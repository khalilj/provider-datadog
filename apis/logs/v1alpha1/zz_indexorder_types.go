// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndexOrderInitParameters struct {

	// (List of String) The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// (String) The unique name of the index order resource.
	// The unique name of the index order resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type IndexOrderObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (List of String) The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// (String) The unique name of the index order resource.
	// The unique name of the index order resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type IndexOrderParameters struct {

	// (List of String) The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	// +kubebuilder:validation:Optional
	Indexes []*string `json:"indexes,omitempty" tf:"indexes,omitempty"`

	// (String) The unique name of the index order resource.
	// The unique name of the index order resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// IndexOrderSpec defines the desired state of IndexOrder
type IndexOrderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndexOrderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IndexOrderInitParameters `json:"initProvider,omitempty"`
}

// IndexOrderStatus defines the observed state of IndexOrder.
type IndexOrderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndexOrderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IndexOrder is the Schema for the IndexOrders API. Provides a Datadog Logs Index API resource. This can be used to manage the order of Datadog logs indexes.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type IndexOrder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.indexes) || (has(self.initProvider) && has(self.initProvider.indexes))",message="spec.forProvider.indexes is a required parameter"
	Spec   IndexOrderSpec   `json:"spec"`
	Status IndexOrderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndexOrderList contains a list of IndexOrders
type IndexOrderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IndexOrder `json:"items"`
}

// Repository type metadata.
var (
	IndexOrder_Kind             = "IndexOrder"
	IndexOrder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IndexOrder_Kind}.String()
	IndexOrder_KindAPIVersion   = IndexOrder_Kind + "." + CRDGroupVersion.String()
	IndexOrder_GroupVersionKind = CRDGroupVersion.WithKind(IndexOrder_Kind)
)

func init() {
	SchemeBuilder.Register(&IndexOrder{}, &IndexOrderList{})
}
