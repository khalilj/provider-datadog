// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ArithmeticProcessorInitParameters struct {

	// (String) Arithmetic operation between one or more log attributes.
	// Arithmetic operation between one or more log attributes.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (Boolean)
	// Boolean value to enable your pipeline.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// Your pipeline name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the arithmetic operation.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ArithmeticProcessorObservation struct {

	// (String) Arithmetic operation between one or more log attributes.
	// Arithmetic operation between one or more log attributes.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (Boolean)
	// Boolean value to enable your pipeline.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// Your pipeline name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the arithmetic operation.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ArithmeticProcessorParameters struct {

	// (String) Arithmetic operation between one or more log attributes.
	// Arithmetic operation between one or more log attributes.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// (Boolean)
	// Boolean value to enable your pipeline.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// +kubebuilder:validation:Optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// Your pipeline name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the arithmetic operation.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type AttributeRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Override the target element if already set.
	// Override the target element if already set.
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict,omitempty"`

	// (Boolean) Remove or preserve the remapped source element.
	// Remove or preserve the remapped source element.
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source,omitempty"`

	// (String) Defines where the sources are from (log attribute or tag).
	// Defines where the sources are from (log `attribute` or `tag`).
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes or tags.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Final attribute or tag name to remap the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) If the target_type of the remapper is attribute, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. string, integer, or double are the possible types. If the target_type is tag, this parameter may not be specified.
	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format,omitempty"`

	// (String) Defines if the target is a log attribute or tag.
	// Defines if the target is a log `attribute` or `tag`.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type AttributeRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Override the target element if already set.
	// Override the target element if already set.
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict,omitempty"`

	// (Boolean) Remove or preserve the remapped source element.
	// Remove or preserve the remapped source element.
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source,omitempty"`

	// (String) Defines where the sources are from (log attribute or tag).
	// Defines where the sources are from (log `attribute` or `tag`).
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes or tags.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Final attribute or tag name to remap the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) If the target_type of the remapper is attribute, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. string, integer, or double are the possible types. If the target_type is tag, this parameter may not be specified.
	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format,omitempty"`

	// (String) Defines if the target is a log attribute or tag.
	// Defines if the target is a log `attribute` or `tag`.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type AttributeRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Override the target element if already set.
	// Override the target element if already set.
	// +kubebuilder:validation:Optional
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict,omitempty"`

	// (Boolean) Remove or preserve the remapped source element.
	// Remove or preserve the remapped source element.
	// +kubebuilder:validation:Optional
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source,omitempty"`

	// (String) Defines where the sources are from (log attribute or tag).
	// Defines where the sources are from (log `attribute` or `tag`).
	// +kubebuilder:validation:Optional
	SourceType *string `json:"sourceType" tf:"source_type,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes or tags.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Final attribute or tag name to remap the sources.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`

	// (String) If the target_type of the remapper is attribute, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. string, integer, or double are the possible types. If the target_type is tag, this parameter may not be specified.
	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	// +kubebuilder:validation:Optional
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format,omitempty"`

	// (String) Defines if the target is a log attribute or tag.
	// Defines if the target is a log `attribute` or `tag`.
	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`
}

type CategoryFilterInitParameters struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type CategoryFilterObservation struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type CategoryFilterParameters struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type CategoryInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []CategoryFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CategoryObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []CategoryFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CategoryParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Filter []CategoryFilterParameters `json:"filter" tf:"filter,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type CategoryProcessorCategoryFilterInitParameters struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type CategoryProcessorCategoryFilterObservation struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type CategoryProcessorCategoryFilterParameters struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type CategoryProcessorCategoryInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []CategoryProcessorCategoryFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CategoryProcessorCategoryObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []CategoryProcessorCategoryFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CategoryProcessorCategoryParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Filter []CategoryProcessorCategoryFilterParameters `json:"filter" tf:"filter,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type CategoryProcessorInitParameters struct {

	// (Block List, Min: 1) List of filters to match or exclude a log with their corresponding name to assign a custom value to the log. (see below for nested schema)
	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	Category []CategoryInitParameters `json:"category,omitempty" tf:"category,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the category
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the target attribute whose value is defined by the matching category.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type CategoryProcessorObservation struct {

	// (Block List, Min: 1) List of filters to match or exclude a log with their corresponding name to assign a custom value to the log. (see below for nested schema)
	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	Category []CategoryObservation `json:"category,omitempty" tf:"category,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the category
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the target attribute whose value is defined by the matching category.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type CategoryProcessorParameters struct {

	// (Block List, Min: 1) List of filters to match or exclude a log with their corresponding name to assign a custom value to the log. (see below for nested schema)
	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	// +kubebuilder:validation:Optional
	Category []CategoryParameters `json:"category" tf:"category,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the category
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the target attribute whose value is defined by the matching category.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type CustomPipelineInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Boolean)
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) (see below for nested schema)
	Processor []ProcessorInitParameters `json:"processor,omitempty" tf:"processor,omitempty"`
}

type CustomPipelineObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean)
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) (see below for nested schema)
	Processor []ProcessorObservation `json:"processor,omitempty" tf:"processor,omitempty"`
}

type CustomPipelineParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Processor []ProcessorParameters `json:"processor,omitempty" tf:"processor,omitempty"`
}

type DateRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type DateRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type DateRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type FilterInitParameters struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type FilterObservation struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type FilterParameters struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type GeoIPParserInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type GeoIPParserObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type GeoIPParserParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type GrokInitParameters struct {

	// (String) Match rules for your grok parser.
	// Match rules for your grok parser.
	MatchRules *string `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// (String) Support rules for your grok parser.
	// Support rules for your grok parser.
	SupportRules *string `json:"supportRules,omitempty" tf:"support_rules,omitempty"`
}

type GrokObservation struct {

	// (String) Match rules for your grok parser.
	// Match rules for your grok parser.
	MatchRules *string `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// (String) Support rules for your grok parser.
	// Support rules for your grok parser.
	SupportRules *string `json:"supportRules,omitempty" tf:"support_rules,omitempty"`
}

type GrokParameters struct {

	// (String) Match rules for your grok parser.
	// Match rules for your grok parser.
	// +kubebuilder:validation:Optional
	MatchRules *string `json:"matchRules" tf:"match_rules,omitempty"`

	// (String) Support rules for your grok parser.
	// Support rules for your grok parser.
	// +kubebuilder:validation:Optional
	SupportRules *string `json:"supportRules" tf:"support_rules,omitempty"`
}

type GrokParserGrokInitParameters struct {

	// (String) Match rules for your grok parser.
	// Match rules for your grok parser.
	MatchRules *string `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// (String) Support rules for your grok parser.
	// Support rules for your grok parser.
	SupportRules *string `json:"supportRules,omitempty" tf:"support_rules,omitempty"`
}

type GrokParserGrokObservation struct {

	// (String) Match rules for your grok parser.
	// Match rules for your grok parser.
	MatchRules *string `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// (String) Support rules for your grok parser.
	// Support rules for your grok parser.
	SupportRules *string `json:"supportRules,omitempty" tf:"support_rules,omitempty"`
}

type GrokParserGrokParameters struct {

	// (String) Match rules for your grok parser.
	// Match rules for your grok parser.
	// +kubebuilder:validation:Optional
	MatchRules *string `json:"matchRules" tf:"match_rules,omitempty"`

	// (String) Support rules for your grok parser.
	// Support rules for your grok parser.
	// +kubebuilder:validation:Optional
	SupportRules *string `json:"supportRules" tf:"support_rules,omitempty"`
}

type GrokParserInitParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Grok []GrokInitParameters `json:"grok,omitempty" tf:"grok,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	Samples []*string `json:"samples,omitempty" tf:"samples,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the log attribute to parse.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type GrokParserObservation struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Grok []GrokObservation `json:"grok,omitempty" tf:"grok,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	Samples []*string `json:"samples,omitempty" tf:"samples,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the log attribute to parse.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type GrokParserParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Grok []GrokParameters `json:"grok" tf:"grok,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// +kubebuilder:validation:Optional
	Samples []*string `json:"samples,omitempty" tf:"samples,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the log attribute to parse.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`
}

type LookupProcessorInitParameters struct {

	// (String) Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (List of String) List of entries of the lookup table using key,value format.
	// List of entries of the lookup table using `key,value` format.
	LookupTable []*string `json:"lookupTable,omitempty" tf:"lookup_table,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type LookupProcessorObservation struct {

	// (String) Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (List of String) List of entries of the lookup table using key,value format.
	// List of entries of the lookup table using `key,value` format.
	LookupTable []*string `json:"lookupTable,omitempty" tf:"lookup_table,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type LookupProcessorParameters struct {

	// (String) Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// +kubebuilder:validation:Optional
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (List of String) List of entries of the lookup table using key,value format.
	// List of entries of the lookup table using `key,value` format.
	// +kubebuilder:validation:Optional
	LookupTable []*string `json:"lookupTable" tf:"lookup_table,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type MessageRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type MessageRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type MessageRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type PipelineFilterInitParameters struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type PipelineFilterObservation struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type PipelineFilterParameters struct {

	// (String) Filter criteria of the category.
	// Filter criteria of the category.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type PipelineInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []PipelineFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Boolean)
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) (see below for nested schema)
	Processor []PipelineProcessorInitParameters `json:"processor,omitempty" tf:"processor,omitempty"`
}

type PipelineObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []PipelineFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Boolean)
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) (see below for nested schema)
	Processor []PipelineProcessorObservation `json:"processor,omitempty" tf:"processor,omitempty"`
}

type PipelineParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Filter []PipelineFilterParameters `json:"filter" tf:"filter,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Processor []PipelineProcessorParameters `json:"processor,omitempty" tf:"processor,omitempty"`
}

type PipelineProcessorInitParameters struct {

	// (Block List, Max: 1) Arithmetic Processor. More information can be found in the official docs (see below for nested schema)
	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	ArithmeticProcessor []ProcessorArithmeticProcessorInitParameters `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor,omitempty"`

	// (Block List, Max: 1) Attribute Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	AttributeRemapper []ProcessorAttributeRemapperInitParameters `json:"attributeRemapper,omitempty" tf:"attribute_remapper,omitempty"`

	// (Block List, Max: 1) Category Processor. More information can be found in the official docs (see below for nested schema)
	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	CategoryProcessor []ProcessorCategoryProcessorInitParameters `json:"categoryProcessor,omitempty" tf:"category_processor,omitempty"`

	// (Block List, Max: 1) Date Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	DateRemapper []ProcessorDateRemapperInitParameters `json:"dateRemapper,omitempty" tf:"date_remapper,omitempty"`

	// (Block List, Max: 1) Date GeoIP Processor. More information can be found in the official docs (see below for nested schema)
	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	GeoIPParser []ProcessorGeoIPParserInitParameters `json:"geoIpParser,omitempty" tf:"geo_ip_parser,omitempty"`

	// (Block List, Max: 1) Grok Processor. More information can be found in the official docs (see below for nested schema)
	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	GrokParser []ProcessorGrokParserInitParameters `json:"grokParser,omitempty" tf:"grok_parser,omitempty"`

	// (Block List, Max: 1) Lookup Processor. More information can be found in the official docs (see below for nested schema)
	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	LookupProcessor []ProcessorLookupProcessorInitParameters `json:"lookupProcessor,omitempty" tf:"lookup_processor,omitempty"`

	// (Block List, Max: 1) Message Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	MessageRemapper []ProcessorMessageRemapperInitParameters `json:"messageRemapper,omitempty" tf:"message_remapper,omitempty"`

	// (Block List, Max: 1) Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the official docs (see below for nested schema)
	// Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	ReferenceTableLookupProcessor []ReferenceTableLookupProcessorInitParameters `json:"referenceTableLookupProcessor,omitempty" tf:"reference_table_lookup_processor,omitempty"`

	// (Block List, Max: 1) Service Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	ServiceRemapper []ServiceRemapperInitParameters `json:"serviceRemapper,omitempty" tf:"service_remapper,omitempty"`

	// (Block List, Max: 1) Status Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	StatusRemapper []StatusRemapperInitParameters `json:"statusRemapper,omitempty" tf:"status_remapper,omitempty"`

	// (Block List, Max: 1) String Builder Processor. More information can be found in the official docs (see below for nested schema)
	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	StringBuilderProcessor []StringBuilderProcessorInitParameters `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor,omitempty"`

	// (Block List, Max: 1) Trace ID Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	TraceIDRemapper []TraceIDRemapperInitParameters `json:"traceIdRemapper,omitempty" tf:"trace_id_remapper,omitempty"`

	// (Block List, Max: 1) URL Parser Processor. More information can be found in the official docs (see below for nested schema)
	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	URLParser []URLParserInitParameters `json:"urlParser,omitempty" tf:"url_parser,omitempty"`

	// Agent Parser Processor. More information can be found in the official docs (see below for nested schema)
	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	UserAgentParser []UserAgentParserInitParameters `json:"userAgentParser,omitempty" tf:"user_agent_parser,omitempty"`
}

type PipelineProcessorObservation struct {

	// (Block List, Max: 1) Arithmetic Processor. More information can be found in the official docs (see below for nested schema)
	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	ArithmeticProcessor []ProcessorArithmeticProcessorObservation `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor,omitempty"`

	// (Block List, Max: 1) Attribute Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	AttributeRemapper []ProcessorAttributeRemapperObservation `json:"attributeRemapper,omitempty" tf:"attribute_remapper,omitempty"`

	// (Block List, Max: 1) Category Processor. More information can be found in the official docs (see below for nested schema)
	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	CategoryProcessor []ProcessorCategoryProcessorObservation `json:"categoryProcessor,omitempty" tf:"category_processor,omitempty"`

	// (Block List, Max: 1) Date Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	DateRemapper []ProcessorDateRemapperObservation `json:"dateRemapper,omitempty" tf:"date_remapper,omitempty"`

	// (Block List, Max: 1) Date GeoIP Processor. More information can be found in the official docs (see below for nested schema)
	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	GeoIPParser []ProcessorGeoIPParserObservation `json:"geoIpParser,omitempty" tf:"geo_ip_parser,omitempty"`

	// (Block List, Max: 1) Grok Processor. More information can be found in the official docs (see below for nested schema)
	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	GrokParser []ProcessorGrokParserObservation `json:"grokParser,omitempty" tf:"grok_parser,omitempty"`

	// (Block List, Max: 1) Lookup Processor. More information can be found in the official docs (see below for nested schema)
	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	LookupProcessor []ProcessorLookupProcessorObservation `json:"lookupProcessor,omitempty" tf:"lookup_processor,omitempty"`

	// (Block List, Max: 1) Message Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	MessageRemapper []ProcessorMessageRemapperObservation `json:"messageRemapper,omitempty" tf:"message_remapper,omitempty"`

	// (Block List, Max: 1) Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the official docs (see below for nested schema)
	// Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	ReferenceTableLookupProcessor []ReferenceTableLookupProcessorObservation `json:"referenceTableLookupProcessor,omitempty" tf:"reference_table_lookup_processor,omitempty"`

	// (Block List, Max: 1) Service Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	ServiceRemapper []ServiceRemapperObservation `json:"serviceRemapper,omitempty" tf:"service_remapper,omitempty"`

	// (Block List, Max: 1) Status Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	StatusRemapper []StatusRemapperObservation `json:"statusRemapper,omitempty" tf:"status_remapper,omitempty"`

	// (Block List, Max: 1) String Builder Processor. More information can be found in the official docs (see below for nested schema)
	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	StringBuilderProcessor []StringBuilderProcessorObservation `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor,omitempty"`

	// (Block List, Max: 1) Trace ID Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	TraceIDRemapper []TraceIDRemapperObservation `json:"traceIdRemapper,omitempty" tf:"trace_id_remapper,omitempty"`

	// (Block List, Max: 1) URL Parser Processor. More information can be found in the official docs (see below for nested schema)
	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	URLParser []URLParserObservation `json:"urlParser,omitempty" tf:"url_parser,omitempty"`

	// Agent Parser Processor. More information can be found in the official docs (see below for nested schema)
	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	UserAgentParser []UserAgentParserObservation `json:"userAgentParser,omitempty" tf:"user_agent_parser,omitempty"`
}

type PipelineProcessorParameters struct {

	// (Block List, Max: 1) Arithmetic Processor. More information can be found in the official docs (see below for nested schema)
	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	// +kubebuilder:validation:Optional
	ArithmeticProcessor []ProcessorArithmeticProcessorParameters `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor,omitempty"`

	// (Block List, Max: 1) Attribute Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	// +kubebuilder:validation:Optional
	AttributeRemapper []ProcessorAttributeRemapperParameters `json:"attributeRemapper,omitempty" tf:"attribute_remapper,omitempty"`

	// (Block List, Max: 1) Category Processor. More information can be found in the official docs (see below for nested schema)
	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	// +kubebuilder:validation:Optional
	CategoryProcessor []ProcessorCategoryProcessorParameters `json:"categoryProcessor,omitempty" tf:"category_processor,omitempty"`

	// (Block List, Max: 1) Date Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	// +kubebuilder:validation:Optional
	DateRemapper []ProcessorDateRemapperParameters `json:"dateRemapper,omitempty" tf:"date_remapper,omitempty"`

	// (Block List, Max: 1) Date GeoIP Processor. More information can be found in the official docs (see below for nested schema)
	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	// +kubebuilder:validation:Optional
	GeoIPParser []ProcessorGeoIPParserParameters `json:"geoIpParser,omitempty" tf:"geo_ip_parser,omitempty"`

	// (Block List, Max: 1) Grok Processor. More information can be found in the official docs (see below for nested schema)
	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	// +kubebuilder:validation:Optional
	GrokParser []ProcessorGrokParserParameters `json:"grokParser,omitempty" tf:"grok_parser,omitempty"`

	// (Block List, Max: 1) Lookup Processor. More information can be found in the official docs (see below for nested schema)
	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	// +kubebuilder:validation:Optional
	LookupProcessor []ProcessorLookupProcessorParameters `json:"lookupProcessor,omitempty" tf:"lookup_processor,omitempty"`

	// (Block List, Max: 1) Message Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	// +kubebuilder:validation:Optional
	MessageRemapper []ProcessorMessageRemapperParameters `json:"messageRemapper,omitempty" tf:"message_remapper,omitempty"`

	// (Block List, Max: 1) Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the official docs (see below for nested schema)
	// Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	// +kubebuilder:validation:Optional
	ReferenceTableLookupProcessor []ReferenceTableLookupProcessorParameters `json:"referenceTableLookupProcessor,omitempty" tf:"reference_table_lookup_processor,omitempty"`

	// (Block List, Max: 1) Service Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	// +kubebuilder:validation:Optional
	ServiceRemapper []ServiceRemapperParameters `json:"serviceRemapper,omitempty" tf:"service_remapper,omitempty"`

	// (Block List, Max: 1) Status Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	// +kubebuilder:validation:Optional
	StatusRemapper []StatusRemapperParameters `json:"statusRemapper,omitempty" tf:"status_remapper,omitempty"`

	// (Block List, Max: 1) String Builder Processor. More information can be found in the official docs (see below for nested schema)
	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	// +kubebuilder:validation:Optional
	StringBuilderProcessor []StringBuilderProcessorParameters `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor,omitempty"`

	// (Block List, Max: 1) Trace ID Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	// +kubebuilder:validation:Optional
	TraceIDRemapper []TraceIDRemapperParameters `json:"traceIdRemapper,omitempty" tf:"trace_id_remapper,omitempty"`

	// (Block List, Max: 1) URL Parser Processor. More information can be found in the official docs (see below for nested schema)
	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	// +kubebuilder:validation:Optional
	URLParser []URLParserParameters `json:"urlParser,omitempty" tf:"url_parser,omitempty"`

	// Agent Parser Processor. More information can be found in the official docs (see below for nested schema)
	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	// +kubebuilder:validation:Optional
	UserAgentParser []UserAgentParserParameters `json:"userAgentParser,omitempty" tf:"user_agent_parser,omitempty"`
}

type ProcessorArithmeticProcessorInitParameters struct {

	// (String) Arithmetic operation between one or more log attributes.
	// Arithmetic operation between one or more log attributes.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (Boolean)
	// Boolean value to enable your pipeline.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// Your pipeline name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the arithmetic operation.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorArithmeticProcessorObservation struct {

	// (String) Arithmetic operation between one or more log attributes.
	// Arithmetic operation between one or more log attributes.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (Boolean)
	// Boolean value to enable your pipeline.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// Your pipeline name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the arithmetic operation.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorArithmeticProcessorParameters struct {

	// (String) Arithmetic operation between one or more log attributes.
	// Arithmetic operation between one or more log attributes.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// (Boolean)
	// Boolean value to enable your pipeline.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// +kubebuilder:validation:Optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// Your pipeline name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the arithmetic operation.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorAttributeRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Override the target element if already set.
	// Override the target element if already set.
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict,omitempty"`

	// (Boolean) Remove or preserve the remapped source element.
	// Remove or preserve the remapped source element.
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source,omitempty"`

	// (String) Defines where the sources are from (log attribute or tag).
	// Defines where the sources are from (log `attribute` or `tag`).
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes or tags.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Final attribute or tag name to remap the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) If the target_type of the remapper is attribute, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. string, integer, or double are the possible types. If the target_type is tag, this parameter may not be specified.
	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format,omitempty"`

	// (String) Defines if the target is a log attribute or tag.
	// Defines if the target is a log `attribute` or `tag`.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type ProcessorAttributeRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Override the target element if already set.
	// Override the target element if already set.
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict,omitempty"`

	// (Boolean) Remove or preserve the remapped source element.
	// Remove or preserve the remapped source element.
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source,omitempty"`

	// (String) Defines where the sources are from (log attribute or tag).
	// Defines where the sources are from (log `attribute` or `tag`).
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes or tags.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Final attribute or tag name to remap the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) If the target_type of the remapper is attribute, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. string, integer, or double are the possible types. If the target_type is tag, this parameter may not be specified.
	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format,omitempty"`

	// (String) Defines if the target is a log attribute or tag.
	// Defines if the target is a log `attribute` or `tag`.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type ProcessorAttributeRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Override the target element if already set.
	// Override the target element if already set.
	// +kubebuilder:validation:Optional
	OverrideOnConflict *bool `json:"overrideOnConflict,omitempty" tf:"override_on_conflict,omitempty"`

	// (Boolean) Remove or preserve the remapped source element.
	// Remove or preserve the remapped source element.
	// +kubebuilder:validation:Optional
	PreserveSource *bool `json:"preserveSource,omitempty" tf:"preserve_source,omitempty"`

	// (String) Defines where the sources are from (log attribute or tag).
	// Defines where the sources are from (log `attribute` or `tag`).
	// +kubebuilder:validation:Optional
	SourceType *string `json:"sourceType" tf:"source_type,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes or tags.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Final attribute or tag name to remap the sources.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`

	// (String) If the target_type of the remapper is attribute, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. string, integer, or double are the possible types. If the target_type is tag, this parameter may not be specified.
	// If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
	// +kubebuilder:validation:Optional
	TargetFormat *string `json:"targetFormat,omitempty" tf:"target_format,omitempty"`

	// (String) Defines if the target is a log attribute or tag.
	// Defines if the target is a log `attribute` or `tag`.
	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`
}

type ProcessorCategoryProcessorInitParameters struct {

	// (Block List, Min: 1) List of filters to match or exclude a log with their corresponding name to assign a custom value to the log. (see below for nested schema)
	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	Category []CategoryProcessorCategoryInitParameters `json:"category,omitempty" tf:"category,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the category
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the target attribute whose value is defined by the matching category.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorCategoryProcessorObservation struct {

	// (Block List, Min: 1) List of filters to match or exclude a log with their corresponding name to assign a custom value to the log. (see below for nested schema)
	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	Category []CategoryProcessorCategoryObservation `json:"category,omitempty" tf:"category,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the category
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the target attribute whose value is defined by the matching category.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorCategoryProcessorParameters struct {

	// (Block List, Min: 1) List of filters to match or exclude a log with their corresponding name to assign a custom value to the log. (see below for nested schema)
	// List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
	// +kubebuilder:validation:Optional
	Category []CategoryProcessorCategoryParameters `json:"category" tf:"category,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the category
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the target attribute whose value is defined by the matching category.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorDateRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorDateRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorDateRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorGeoIPParserInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorGeoIPParserObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorGeoIPParserParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorGrokParserInitParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Grok []GrokParserGrokInitParameters `json:"grok,omitempty" tf:"grok,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	Samples []*string `json:"samples,omitempty" tf:"samples,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the log attribute to parse.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type ProcessorGrokParserObservation struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Grok []GrokParserGrokObservation `json:"grok,omitempty" tf:"grok,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	Samples []*string `json:"samples,omitempty" tf:"samples,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the log attribute to parse.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type ProcessorGrokParserParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Grok []GrokParserGrokParameters `json:"grok" tf:"grok,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
	// +kubebuilder:validation:Optional
	Samples []*string `json:"samples,omitempty" tf:"samples,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the log attribute to parse.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`
}

type ProcessorInitParameters struct {

	// (Block List, Max: 1) Arithmetic Processor. More information can be found in the official docs (see below for nested schema)
	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	ArithmeticProcessor []ArithmeticProcessorInitParameters `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor,omitempty"`

	// (Block List, Max: 1) Attribute Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	AttributeRemapper []AttributeRemapperInitParameters `json:"attributeRemapper,omitempty" tf:"attribute_remapper,omitempty"`

	// (Block List, Max: 1) Category Processor. More information can be found in the official docs (see below for nested schema)
	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	CategoryProcessor []CategoryProcessorInitParameters `json:"categoryProcessor,omitempty" tf:"category_processor,omitempty"`

	// (Block List, Max: 1) Date Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	DateRemapper []DateRemapperInitParameters `json:"dateRemapper,omitempty" tf:"date_remapper,omitempty"`

	// (Block List, Max: 1) Date GeoIP Processor. More information can be found in the official docs (see below for nested schema)
	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	GeoIPParser []GeoIPParserInitParameters `json:"geoIpParser,omitempty" tf:"geo_ip_parser,omitempty"`

	// (Block List, Max: 1) Grok Processor. More information can be found in the official docs (see below for nested schema)
	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	GrokParser []GrokParserInitParameters `json:"grokParser,omitempty" tf:"grok_parser,omitempty"`

	// (Block List, Max: 1) Lookup Processor. More information can be found in the official docs (see below for nested schema)
	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	LookupProcessor []LookupProcessorInitParameters `json:"lookupProcessor,omitempty" tf:"lookup_processor,omitempty"`

	// (Block List, Max: 1) Message Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	MessageRemapper []MessageRemapperInitParameters `json:"messageRemapper,omitempty" tf:"message_remapper,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Pipeline []PipelineInitParameters `json:"pipeline,omitempty" tf:"pipeline,omitempty"`

	// (Block List, Max: 1) Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the official docs (see below for nested schema)
	// Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	ReferenceTableLookupProcessor []ProcessorReferenceTableLookupProcessorInitParameters `json:"referenceTableLookupProcessor,omitempty" tf:"reference_table_lookup_processor,omitempty"`

	// (Block List, Max: 1) Service Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	ServiceRemapper []ProcessorServiceRemapperInitParameters `json:"serviceRemapper,omitempty" tf:"service_remapper,omitempty"`

	// (Block List, Max: 1) Status Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	StatusRemapper []ProcessorStatusRemapperInitParameters `json:"statusRemapper,omitempty" tf:"status_remapper,omitempty"`

	// (Block List, Max: 1) String Builder Processor. More information can be found in the official docs (see below for nested schema)
	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	StringBuilderProcessor []ProcessorStringBuilderProcessorInitParameters `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor,omitempty"`

	// (Block List, Max: 1) Trace ID Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	TraceIDRemapper []ProcessorTraceIDRemapperInitParameters `json:"traceIdRemapper,omitempty" tf:"trace_id_remapper,omitempty"`

	// (Block List, Max: 1) URL Parser Processor. More information can be found in the official docs (see below for nested schema)
	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	URLParser []ProcessorURLParserInitParameters `json:"urlParser,omitempty" tf:"url_parser,omitempty"`

	// Agent Parser Processor. More information can be found in the official docs (see below for nested schema)
	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	UserAgentParser []ProcessorUserAgentParserInitParameters `json:"userAgentParser,omitempty" tf:"user_agent_parser,omitempty"`
}

type ProcessorLookupProcessorInitParameters struct {

	// (String) Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (List of String) List of entries of the lookup table using key,value format.
	// List of entries of the lookup table using `key,value` format.
	LookupTable []*string `json:"lookupTable,omitempty" tf:"lookup_table,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorLookupProcessorObservation struct {

	// (String) Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (List of String) List of entries of the lookup table using key,value format.
	// List of entries of the lookup table using `key,value` format.
	LookupTable []*string `json:"lookupTable,omitempty" tf:"lookup_table,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorLookupProcessorParameters struct {

	// (String) Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
	// +kubebuilder:validation:Optional
	DefaultLookup *string `json:"defaultLookup,omitempty" tf:"default_lookup,omitempty"`

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (List of String) List of entries of the lookup table using key,value format.
	// List of entries of the lookup table using `key,value` format.
	// +kubebuilder:validation:Optional
	LookupTable []*string `json:"lookupTable" tf:"lookup_table,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorMessageRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorMessageRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorMessageRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorObservation struct {

	// (Block List, Max: 1) Arithmetic Processor. More information can be found in the official docs (see below for nested schema)
	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	ArithmeticProcessor []ArithmeticProcessorObservation `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor,omitempty"`

	// (Block List, Max: 1) Attribute Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	AttributeRemapper []AttributeRemapperObservation `json:"attributeRemapper,omitempty" tf:"attribute_remapper,omitempty"`

	// (Block List, Max: 1) Category Processor. More information can be found in the official docs (see below for nested schema)
	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	CategoryProcessor []CategoryProcessorObservation `json:"categoryProcessor,omitempty" tf:"category_processor,omitempty"`

	// (Block List, Max: 1) Date Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	DateRemapper []DateRemapperObservation `json:"dateRemapper,omitempty" tf:"date_remapper,omitempty"`

	// (Block List, Max: 1) Date GeoIP Processor. More information can be found in the official docs (see below for nested schema)
	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	GeoIPParser []GeoIPParserObservation `json:"geoIpParser,omitempty" tf:"geo_ip_parser,omitempty"`

	// (Block List, Max: 1) Grok Processor. More information can be found in the official docs (see below for nested schema)
	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	GrokParser []GrokParserObservation `json:"grokParser,omitempty" tf:"grok_parser,omitempty"`

	// (Block List, Max: 1) Lookup Processor. More information can be found in the official docs (see below for nested schema)
	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	LookupProcessor []LookupProcessorObservation `json:"lookupProcessor,omitempty" tf:"lookup_processor,omitempty"`

	// (Block List, Max: 1) Message Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	MessageRemapper []MessageRemapperObservation `json:"messageRemapper,omitempty" tf:"message_remapper,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Pipeline []PipelineObservation `json:"pipeline,omitempty" tf:"pipeline,omitempty"`

	// (Block List, Max: 1) Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the official docs (see below for nested schema)
	// Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	ReferenceTableLookupProcessor []ProcessorReferenceTableLookupProcessorObservation `json:"referenceTableLookupProcessor,omitempty" tf:"reference_table_lookup_processor,omitempty"`

	// (Block List, Max: 1) Service Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	ServiceRemapper []ProcessorServiceRemapperObservation `json:"serviceRemapper,omitempty" tf:"service_remapper,omitempty"`

	// (Block List, Max: 1) Status Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	StatusRemapper []ProcessorStatusRemapperObservation `json:"statusRemapper,omitempty" tf:"status_remapper,omitempty"`

	// (Block List, Max: 1) String Builder Processor. More information can be found in the official docs (see below for nested schema)
	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	StringBuilderProcessor []ProcessorStringBuilderProcessorObservation `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor,omitempty"`

	// (Block List, Max: 1) Trace ID Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	TraceIDRemapper []ProcessorTraceIDRemapperObservation `json:"traceIdRemapper,omitempty" tf:"trace_id_remapper,omitempty"`

	// (Block List, Max: 1) URL Parser Processor. More information can be found in the official docs (see below for nested schema)
	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	URLParser []ProcessorURLParserObservation `json:"urlParser,omitempty" tf:"url_parser,omitempty"`

	// Agent Parser Processor. More information can be found in the official docs (see below for nested schema)
	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	UserAgentParser []ProcessorUserAgentParserObservation `json:"userAgentParser,omitempty" tf:"user_agent_parser,omitempty"`
}

type ProcessorParameters struct {

	// (Block List, Max: 1) Arithmetic Processor. More information can be found in the official docs (see below for nested schema)
	// Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
	// +kubebuilder:validation:Optional
	ArithmeticProcessor []ArithmeticProcessorParameters `json:"arithmeticProcessor,omitempty" tf:"arithmetic_processor,omitempty"`

	// (Block List, Max: 1) Attribute Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
	// +kubebuilder:validation:Optional
	AttributeRemapper []AttributeRemapperParameters `json:"attributeRemapper,omitempty" tf:"attribute_remapper,omitempty"`

	// (Block List, Max: 1) Category Processor. More information can be found in the official docs (see below for nested schema)
	// Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
	// +kubebuilder:validation:Optional
	CategoryProcessor []CategoryProcessorParameters `json:"categoryProcessor,omitempty" tf:"category_processor,omitempty"`

	// (Block List, Max: 1) Date Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
	// +kubebuilder:validation:Optional
	DateRemapper []DateRemapperParameters `json:"dateRemapper,omitempty" tf:"date_remapper,omitempty"`

	// (Block List, Max: 1) Date GeoIP Processor. More information can be found in the official docs (see below for nested schema)
	// Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
	// +kubebuilder:validation:Optional
	GeoIPParser []GeoIPParserParameters `json:"geoIpParser,omitempty" tf:"geo_ip_parser,omitempty"`

	// (Block List, Max: 1) Grok Processor. More information can be found in the official docs (see below for nested schema)
	// Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
	// +kubebuilder:validation:Optional
	GrokParser []GrokParserParameters `json:"grokParser,omitempty" tf:"grok_parser,omitempty"`

	// (Block List, Max: 1) Lookup Processor. More information can be found in the official docs (see below for nested schema)
	// Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	// +kubebuilder:validation:Optional
	LookupProcessor []LookupProcessorParameters `json:"lookupProcessor,omitempty" tf:"lookup_processor,omitempty"`

	// (Block List, Max: 1) Message Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
	// +kubebuilder:validation:Optional
	MessageRemapper []MessageRemapperParameters `json:"messageRemapper,omitempty" tf:"message_remapper,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Pipeline []PipelineParameters `json:"pipeline,omitempty" tf:"pipeline,omitempty"`

	// (Block List, Max: 1) Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the official docs (see below for nested schema)
	// Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
	// +kubebuilder:validation:Optional
	ReferenceTableLookupProcessor []ProcessorReferenceTableLookupProcessorParameters `json:"referenceTableLookupProcessor,omitempty" tf:"reference_table_lookup_processor,omitempty"`

	// (Block List, Max: 1) Service Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
	// +kubebuilder:validation:Optional
	ServiceRemapper []ProcessorServiceRemapperParameters `json:"serviceRemapper,omitempty" tf:"service_remapper,omitempty"`

	// (Block List, Max: 1) Status Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
	// +kubebuilder:validation:Optional
	StatusRemapper []ProcessorStatusRemapperParameters `json:"statusRemapper,omitempty" tf:"status_remapper,omitempty"`

	// (Block List, Max: 1) String Builder Processor. More information can be found in the official docs (see below for nested schema)
	// String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
	// +kubebuilder:validation:Optional
	StringBuilderProcessor []ProcessorStringBuilderProcessorParameters `json:"stringBuilderProcessor,omitempty" tf:"string_builder_processor,omitempty"`

	// (Block List, Max: 1) Trace ID Remapper Processor. More information can be found in the official docs (see below for nested schema)
	// Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
	// +kubebuilder:validation:Optional
	TraceIDRemapper []ProcessorTraceIDRemapperParameters `json:"traceIdRemapper,omitempty" tf:"trace_id_remapper,omitempty"`

	// (Block List, Max: 1) URL Parser Processor. More information can be found in the official docs (see below for nested schema)
	// URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
	// +kubebuilder:validation:Optional
	URLParser []ProcessorURLParserParameters `json:"urlParser,omitempty" tf:"url_parser,omitempty"`

	// Agent Parser Processor. More information can be found in the official docs (see below for nested schema)
	// User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
	// +kubebuilder:validation:Optional
	UserAgentParser []ProcessorUserAgentParserParameters `json:"userAgentParser,omitempty" tf:"user_agent_parser,omitempty"`
}

type ProcessorReferenceTableLookupProcessorInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String) Name of the Reference Table for the source attribute and their associated target attribute values.
	// Name of the Reference Table for the source attribute and their associated target attribute values.
	LookupEnrichmentTable *string `json:"lookupEnrichmentTable,omitempty" tf:"lookup_enrichment_table,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorReferenceTableLookupProcessorObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String) Name of the Reference Table for the source attribute and their associated target attribute values.
	// Name of the Reference Table for the source attribute and their associated target attribute values.
	LookupEnrichmentTable *string `json:"lookupEnrichmentTable,omitempty" tf:"lookup_enrichment_table,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorReferenceTableLookupProcessorParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String) Name of the Reference Table for the source attribute and their associated target attribute values.
	// Name of the Reference Table for the source attribute and their associated target attribute values.
	// +kubebuilder:validation:Optional
	LookupEnrichmentTable *string `json:"lookupEnrichmentTable" tf:"lookup_enrichment_table,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorServiceRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorServiceRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorServiceRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorStatusRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorStatusRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorStatusRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorStringBuilderProcessorInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If it replaces all missing attributes of template by an empty string.
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// The name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// The name of the attribute that contains the result of the template.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The formula with one or more attributes and raw text.
	// The formula with one or more attributes and raw text.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`
}

type ProcessorStringBuilderProcessorObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If it replaces all missing attributes of template by an empty string.
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// The name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// The name of the attribute that contains the result of the template.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The formula with one or more attributes and raw text.
	// The formula with one or more attributes and raw text.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`
}

type ProcessorStringBuilderProcessorParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If it replaces all missing attributes of template by an empty string.
	// +kubebuilder:validation:Optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// The name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// The name of the attribute that contains the result of the template.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`

	// (String) The formula with one or more attributes and raw text.
	// The formula with one or more attributes and raw text.
	// +kubebuilder:validation:Optional
	Template *string `json:"template" tf:"template,omitempty"`
}

type ProcessorTraceIDRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorTraceIDRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ProcessorTraceIDRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type ProcessorURLParserInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Normalize the ending slashes or not.
	// Normalize the ending slashes or not.
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorURLParserObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Normalize the ending slashes or not.
	// Normalize the ending slashes or not.
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorURLParserParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Normalize the ending slashes or not.
	// Normalize the ending slashes or not.
	// +kubebuilder:validation:Optional
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProcessorUserAgentParserInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If the source attribute is URL encoded or not.
	// If the source attribute is URL encoded or not.
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorUserAgentParserObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If the source attribute is URL encoded or not.
	// If the source attribute is URL encoded or not.
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ProcessorUserAgentParserParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If the source attribute is URL encoded or not.
	// If the source attribute is URL encoded or not.
	// +kubebuilder:validation:Optional
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type ReferenceTableLookupProcessorInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String) Name of the Reference Table for the source attribute and their associated target attribute values.
	// Name of the Reference Table for the source attribute and their associated target attribute values.
	LookupEnrichmentTable *string `json:"lookupEnrichmentTable,omitempty" tf:"lookup_enrichment_table,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ReferenceTableLookupProcessorObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String) Name of the Reference Table for the source attribute and their associated target attribute values.
	// Name of the Reference Table for the source attribute and their associated target attribute values.
	LookupEnrichmentTable *string `json:"lookupEnrichmentTable,omitempty" tf:"lookup_enrichment_table,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ReferenceTableLookupProcessorParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String) Name of the Reference Table for the source attribute and their associated target attribute values.
	// Name of the Reference Table for the source attribute and their associated target attribute values.
	// +kubebuilder:validation:Optional
	LookupEnrichmentTable *string `json:"lookupEnrichmentTable" tf:"lookup_enrichment_table,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the log attribute to parse.
	// Name of the source attribute used to do the lookup.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the attribute that contains the result of the lookup.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type ServiceRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ServiceRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ServiceRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type StatusRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type StatusRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type StatusRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type StringBuilderProcessorInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If it replaces all missing attributes of template by an empty string.
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// The name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// The name of the attribute that contains the result of the template.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The formula with one or more attributes and raw text.
	// The formula with one or more attributes and raw text.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`
}

type StringBuilderProcessorObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If it replaces all missing attributes of template by an empty string.
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// The name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// The name of the attribute that contains the result of the template.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The formula with one or more attributes and raw text.
	// The formula with one or more attributes and raw text.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`
}

type StringBuilderProcessorParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
	// If it replaces all missing attributes of template by an empty string.
	// +kubebuilder:validation:Optional
	IsReplaceMissing *bool `json:"isReplaceMissing,omitempty" tf:"is_replace_missing,omitempty"`

	// (String)
	// The name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// The name of the attribute that contains the result of the template.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`

	// (String) The formula with one or more attributes and raw text.
	// The formula with one or more attributes and raw text.
	// +kubebuilder:validation:Optional
	Template *string `json:"template" tf:"template,omitempty"`
}

type TraceIDRemapperInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type TraceIDRemapperObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type TraceIDRemapperParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`
}

type URLParserInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Normalize the ending slashes or not.
	// Normalize the ending slashes or not.
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type URLParserObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Normalize the ending slashes or not.
	// Normalize the ending slashes or not.
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type URLParserParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Normalize the ending slashes or not.
	// Normalize the ending slashes or not.
	// +kubebuilder:validation:Optional
	NormalizeEndingSlashes *bool `json:"normalizeEndingSlashes,omitempty" tf:"normalize_ending_slashes,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

type UserAgentParserInitParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If the source attribute is URL encoded or not.
	// If the source attribute is URL encoded or not.
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type UserAgentParserObservation struct {

	// (Boolean)
	// If the processor is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If the source attribute is URL encoded or not.
	// If the source attribute is URL encoded or not.
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded,omitempty"`

	// (String)
	// Name of the processor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type UserAgentParserParameters struct {

	// (Boolean)
	// If the processor is enabled or not.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (Boolean) If the source attribute is URL encoded or not.
	// If the source attribute is URL encoded or not.
	// +kubebuilder:validation:Optional
	IsEncoded *bool `json:"isEncoded,omitempty" tf:"is_encoded,omitempty"`

	// (String)
	// Name of the processor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) List of source attributes or tags.
	// List of source attributes.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources" tf:"sources,omitempty"`

	// (String) Name of the attribute that contains the result of the arithmetic operation.
	// Name of the parent attribute that contains all the extracted details from the sources.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

// CustomPipelineSpec defines the desired state of CustomPipeline
type CustomPipelineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomPipelineParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomPipelineInitParameters `json:"initProvider,omitempty"`
}

// CustomPipelineStatus defines the observed state of CustomPipeline.
type CustomPipelineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomPipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CustomPipeline is the Schema for the CustomPipelines API. Provides a Datadog Logs Pipeline API https://docs.datadoghq.com/api/v1/logs-pipelines/ resource, which is used to create and manage Datadog logs custom pipelines. Each datadog_logs_custom_pipeline resource defines a complete pipeline. The order of the pipelines is maintained in a different resource: datadog_logs_pipeline_order. When creating a new pipeline, you need to explicitly add this pipeline to the datadog_logs_pipeline_order resource to track the pipeline. Similarly, when a pipeline needs to be destroyed, remove its references from the datadog_logs_pipeline_order resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type CustomPipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filter) || (has(self.initProvider) && has(self.initProvider.filter))",message="spec.forProvider.filter is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CustomPipelineSpec   `json:"spec"`
	Status CustomPipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomPipelineList contains a list of CustomPipelines
type CustomPipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomPipeline `json:"items"`
}

// Repository type metadata.
var (
	CustomPipeline_Kind             = "CustomPipeline"
	CustomPipeline_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomPipeline_Kind}.String()
	CustomPipeline_KindAPIVersion   = CustomPipeline_Kind + "." + CRDGroupVersion.String()
	CustomPipeline_GroupVersionKind = CRDGroupVersion.WithKind(CustomPipeline_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomPipeline{}, &CustomPipelineList{})
}
