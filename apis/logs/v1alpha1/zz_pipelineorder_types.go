/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PipelineOrderInitParameters struct {

	// (String) The name attribute in the resource datadog_logs_pipeline_order needs to be unique. It's recommended to use the same value as the resource name. No related field is available in Logs Pipeline API.
	// The name attribute in the resource `datadog_logs_pipeline_order` needs to be unique. It's recommended to use the same value as the resource name. No related field is available in [Logs Pipeline API](https://docs.datadoghq.com/api/v1/logs-pipelines/#get-pipeline-order).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The pipeline IDs list. The order of pipeline IDs in this attribute defines the overall pipeline order for logs.
	// The pipeline IDs list. The order of pipeline IDs in this attribute defines the overall pipeline order for logs.
	Pipelines []*string `json:"pipelines,omitempty" tf:"pipelines,omitempty"`
}

type PipelineOrderObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name attribute in the resource datadog_logs_pipeline_order needs to be unique. It's recommended to use the same value as the resource name. No related field is available in Logs Pipeline API.
	// The name attribute in the resource `datadog_logs_pipeline_order` needs to be unique. It's recommended to use the same value as the resource name. No related field is available in [Logs Pipeline API](https://docs.datadoghq.com/api/v1/logs-pipelines/#get-pipeline-order).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The pipeline IDs list. The order of pipeline IDs in this attribute defines the overall pipeline order for logs.
	// The pipeline IDs list. The order of pipeline IDs in this attribute defines the overall pipeline order for logs.
	Pipelines []*string `json:"pipelines,omitempty" tf:"pipelines,omitempty"`
}

type PipelineOrderParameters struct {

	// (String) The name attribute in the resource datadog_logs_pipeline_order needs to be unique. It's recommended to use the same value as the resource name. No related field is available in Logs Pipeline API.
	// The name attribute in the resource `datadog_logs_pipeline_order` needs to be unique. It's recommended to use the same value as the resource name. No related field is available in [Logs Pipeline API](https://docs.datadoghq.com/api/v1/logs-pipelines/#get-pipeline-order).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The pipeline IDs list. The order of pipeline IDs in this attribute defines the overall pipeline order for logs.
	// The pipeline IDs list. The order of pipeline IDs in this attribute defines the overall pipeline order for logs.
	// +kubebuilder:validation:Optional
	Pipelines []*string `json:"pipelines,omitempty" tf:"pipelines,omitempty"`
}

// PipelineOrderSpec defines the desired state of PipelineOrder
type PipelineOrderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PipelineOrderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PipelineOrderInitParameters `json:"initProvider,omitempty"`
}

// PipelineOrderStatus defines the observed state of PipelineOrder.
type PipelineOrderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PipelineOrderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PipelineOrder is the Schema for the PipelineOrders API. Provides a Datadog Logs Pipeline API resource, which is used to manage Datadog log pipelines order.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type PipelineOrder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pipelines) || (has(self.initProvider) && has(self.initProvider.pipelines))",message="spec.forProvider.pipelines is a required parameter"
	Spec   PipelineOrderSpec   `json:"spec"`
	Status PipelineOrderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PipelineOrderList contains a list of PipelineOrders
type PipelineOrderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PipelineOrder `json:"items"`
}

// Repository type metadata.
var (
	PipelineOrder_Kind             = "PipelineOrder"
	PipelineOrder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PipelineOrder_Kind}.String()
	PipelineOrder_KindAPIVersion   = PipelineOrder_Kind + "." + CRDGroupVersion.String()
	PipelineOrder_GroupVersionKind = CRDGroupVersion.WithKind(PipelineOrder_Kind)
)

func init() {
	SchemeBuilder.Register(&PipelineOrder{}, &PipelineOrderList{})
}
