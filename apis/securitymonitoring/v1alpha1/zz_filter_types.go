// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExclusionFilterInitParameters struct {

	// (String) The name of the security filter.
	// Exclusion filter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The query of the security filter.
	// Exclusion filter query. Logs that match this query are excluded from the security filter.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ExclusionFilterObservation struct {

	// (String) The name of the security filter.
	// Exclusion filter name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The query of the security filter.
	// Exclusion filter query. Logs that match this query are excluded from the security filter.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ExclusionFilterParameters struct {

	// (String) The name of the security filter.
	// Exclusion filter name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The query of the security filter.
	// Exclusion filter query. Logs that match this query are excluded from the security filter.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type FilterInitParameters_2 struct {

	// (Block List) Exclusion filters to exclude some logs from the security filter. (see below for nested schema)
	// Exclusion filters to exclude some logs from the security filter.
	ExclusionFilter []ExclusionFilterInitParameters `json:"exclusionFilter,omitempty" tf:"exclusion_filter,omitempty"`

	// (String) The filtered data type. Valid values are logs. Defaults to "logs".
	// The filtered data type. Valid values are `logs`. Defaults to `"logs"`.
	FilteredDataType *string `json:"filteredDataType,omitempty" tf:"filtered_data_type,omitempty"`

	// (Boolean) Whether the security filter is enabled.
	// Whether the security filter is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String) The name of the security filter.
	// The name of the security filter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The query of the security filter.
	// The query of the security filter.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type FilterObservation_2 struct {

	// (Block List) Exclusion filters to exclude some logs from the security filter. (see below for nested schema)
	// Exclusion filters to exclude some logs from the security filter.
	ExclusionFilter []ExclusionFilterObservation `json:"exclusionFilter,omitempty" tf:"exclusion_filter,omitempty"`

	// (String) The filtered data type. Valid values are logs. Defaults to "logs".
	// The filtered data type. Valid values are `logs`. Defaults to `"logs"`.
	FilteredDataType *string `json:"filteredDataType,omitempty" tf:"filtered_data_type,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Whether the security filter is enabled.
	// Whether the security filter is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String) The name of the security filter.
	// The name of the security filter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The query of the security filter.
	// The query of the security filter.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (Number) The version of the security filter.
	// The version of the security filter.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type FilterParameters_2 struct {

	// (Block List) Exclusion filters to exclude some logs from the security filter. (see below for nested schema)
	// Exclusion filters to exclude some logs from the security filter.
	// +kubebuilder:validation:Optional
	ExclusionFilter []ExclusionFilterParameters `json:"exclusionFilter,omitempty" tf:"exclusion_filter,omitempty"`

	// (String) The filtered data type. Valid values are logs. Defaults to "logs".
	// The filtered data type. Valid values are `logs`. Defaults to `"logs"`.
	// +kubebuilder:validation:Optional
	FilteredDataType *string `json:"filteredDataType,omitempty" tf:"filtered_data_type,omitempty"`

	// (Boolean) Whether the security filter is enabled.
	// Whether the security filter is enabled.
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// (String) The name of the security filter.
	// The name of the security filter.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The query of the security filter.
	// The query of the security filter.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

// FilterSpec defines the desired state of Filter
type FilterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FilterParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FilterInitParameters_2 `json:"initProvider,omitempty"`
}

// FilterStatus defines the observed state of Filter.
type FilterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FilterObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Filter is the Schema for the Filters API. Provides a Datadog Security Monitoring Rule API resource for security filters.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Filter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isEnabled) || (has(self.initProvider) && has(self.initProvider.isEnabled))",message="spec.forProvider.isEnabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.query) || (has(self.initProvider) && has(self.initProvider.query))",message="spec.forProvider.query is a required parameter"
	Spec   FilterSpec   `json:"spec"`
	Status FilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FilterList contains a list of Filters
type FilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Filter `json:"items"`
}

// Repository type metadata.
var (
	Filter_Kind             = "Filter"
	Filter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Filter_Kind}.String()
	Filter_KindAPIVersion   = Filter_Kind + "." + CRDGroupVersion.String()
	Filter_GroupVersionKind = CRDGroupVersion.WithKind(Filter_Kind)
)

func init() {
	SchemeBuilder.Register(&Filter{}, &FilterList{})
}
