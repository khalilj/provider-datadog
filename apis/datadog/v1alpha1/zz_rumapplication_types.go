/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RUMApplicationInitParameters struct {

	// (String) Name of the RUM application.
	// Name of the RUM application.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// native, flutter. Defaults to "browser".
	// Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `"browser"`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RUMApplicationObservation struct {

	// (String) The client token.
	// The client token.
	ClientToken *string `json:"clientToken,omitempty" tf:"client_token,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the RUM application.
	// Name of the RUM application.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// native, flutter. Defaults to "browser".
	// Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `"browser"`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RUMApplicationParameters struct {

	// (String) Name of the RUM application.
	// Name of the RUM application.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// native, flutter. Defaults to "browser".
	// Type of the RUM application. Supported values are `browser`, `ios`, `android`, `react-native`, `flutter`. Defaults to `"browser"`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// RUMApplicationSpec defines the desired state of RUMApplication
type RUMApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RUMApplicationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RUMApplicationInitParameters `json:"initProvider,omitempty"`
}

// RUMApplicationStatus defines the observed state of RUMApplication.
type RUMApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RUMApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RUMApplication is the Schema for the RUMApplications API. Provides a Datadog RUM application resource. This can be used to create and manage Datadog RUM applications.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type RUMApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   RUMApplicationSpec   `json:"spec"`
	Status RUMApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RUMApplicationList contains a list of RUMApplications
type RUMApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RUMApplication `json:"items"`
}

// Repository type metadata.
var (
	RUMApplication_Kind             = "RUMApplication"
	RUMApplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RUMApplication_Kind}.String()
	RUMApplication_KindAPIVersion   = RUMApplication_Kind + "." + CRDGroupVersion.String()
	RUMApplication_GroupVersionKind = CRDGroupVersion.WithKind(RUMApplication_Kind)
)

func init() {
	SchemeBuilder.Register(&RUMApplication{}, &RUMApplicationList{})
}
