/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MonitorConfigPolicyInitParameters struct {

	// (String) The monitor config policy type Valid values are tag.
	// The monitor config policy type Valid values are `tag`.
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`

	// (Block List, Max: 1) Config for a tag policy. Only set if policy_type is tag. (see below for nested schema)
	// Config for a tag policy. Only set if `policy_type` is `tag`.
	TagPolicy []TagPolicyInitParameters `json:"tagPolicy,omitempty" tf:"tag_policy,omitempty"`
}

type MonitorConfigPolicyObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The monitor config policy type Valid values are tag.
	// The monitor config policy type Valid values are `tag`.
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`

	// (Block List, Max: 1) Config for a tag policy. Only set if policy_type is tag. (see below for nested schema)
	// Config for a tag policy. Only set if `policy_type` is `tag`.
	TagPolicy []TagPolicyObservation `json:"tagPolicy,omitempty" tf:"tag_policy,omitempty"`
}

type MonitorConfigPolicyParameters struct {

	// (String) The monitor config policy type Valid values are tag.
	// The monitor config policy type Valid values are `tag`.
	// +kubebuilder:validation:Optional
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`

	// (Block List, Max: 1) Config for a tag policy. Only set if policy_type is tag. (see below for nested schema)
	// Config for a tag policy. Only set if `policy_type` is `tag`.
	// +kubebuilder:validation:Optional
	TagPolicy []TagPolicyParameters `json:"tagPolicy,omitempty" tf:"tag_policy,omitempty"`
}

type TagPolicyInitParameters struct {

	// (String) The key of the tag
	// The key of the tag
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`

	// (Boolean) If a tag key is required for monitor creation
	// If a tag key is required for monitor creation
	TagKeyRequired *bool `json:"tagKeyRequired,omitempty" tf:"tag_key_required,omitempty"`

	// (List of String) Valid values for the tag
	// Valid values for the tag
	ValidTagValues []*string `json:"validTagValues,omitempty" tf:"valid_tag_values,omitempty"`
}

type TagPolicyObservation struct {

	// (String) The key of the tag
	// The key of the tag
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`

	// (Boolean) If a tag key is required for monitor creation
	// If a tag key is required for monitor creation
	TagKeyRequired *bool `json:"tagKeyRequired,omitempty" tf:"tag_key_required,omitempty"`

	// (List of String) Valid values for the tag
	// Valid values for the tag
	ValidTagValues []*string `json:"validTagValues,omitempty" tf:"valid_tag_values,omitempty"`
}

type TagPolicyParameters struct {

	// (String) The key of the tag
	// The key of the tag
	// +kubebuilder:validation:Optional
	TagKey *string `json:"tagKey" tf:"tag_key,omitempty"`

	// (Boolean) If a tag key is required for monitor creation
	// If a tag key is required for monitor creation
	// +kubebuilder:validation:Optional
	TagKeyRequired *bool `json:"tagKeyRequired" tf:"tag_key_required,omitempty"`

	// (List of String) Valid values for the tag
	// Valid values for the tag
	// +kubebuilder:validation:Optional
	ValidTagValues []*string `json:"validTagValues" tf:"valid_tag_values,omitempty"`
}

// MonitorConfigPolicySpec defines the desired state of MonitorConfigPolicy
type MonitorConfigPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorConfigPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MonitorConfigPolicyInitParameters `json:"initProvider,omitempty"`
}

// MonitorConfigPolicyStatus defines the observed state of MonitorConfigPolicy.
type MonitorConfigPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorConfigPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MonitorConfigPolicy is the Schema for the MonitorConfigPolicys API. Provides a Datadog monitor config policy resource. This can be used to create and manage Datadog monitor config policies.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type MonitorConfigPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyType) || (has(self.initProvider) && has(self.initProvider.policyType))",message="spec.forProvider.policyType is a required parameter"
	Spec   MonitorConfigPolicySpec   `json:"spec"`
	Status MonitorConfigPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorConfigPolicyList contains a list of MonitorConfigPolicys
type MonitorConfigPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorConfigPolicy `json:"items"`
}

// Repository type metadata.
var (
	MonitorConfigPolicy_Kind             = "MonitorConfigPolicy"
	MonitorConfigPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MonitorConfigPolicy_Kind}.String()
	MonitorConfigPolicy_KindAPIVersion   = MonitorConfigPolicy_Kind + "." + CRDGroupVersion.String()
	MonitorConfigPolicy_GroupVersionKind = CRDGroupVersion.WithKind(MonitorConfigPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&MonitorConfigPolicy{}, &MonitorConfigPolicyList{})
}
