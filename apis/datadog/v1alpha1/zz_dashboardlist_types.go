// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DashItemInitParameters struct {

	// (String) The ID of the dashboard to add
	// The ID of the dashboard to add
	DashID *string `json:"dashId,omitempty" tf:"dash_id,omitempty"`

	// (String) The type of this dashboard. Valid values are custom_timeboard, custom_screenboard, integration_screenboard, integration_timeboard, host_timeboard.
	// The type of this dashboard. Valid values are `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, `host_timeboard`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DashItemObservation struct {

	// (String) The ID of the dashboard to add
	// The ID of the dashboard to add
	DashID *string `json:"dashId,omitempty" tf:"dash_id,omitempty"`

	// (String) The type of this dashboard. Valid values are custom_timeboard, custom_screenboard, integration_screenboard, integration_timeboard, host_timeboard.
	// The type of this dashboard. Valid values are `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, `host_timeboard`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DashItemParameters struct {

	// (String) The ID of the dashboard to add
	// The ID of the dashboard to add
	// +kubebuilder:validation:Optional
	DashID *string `json:"dashId" tf:"dash_id,omitempty"`

	// (String) The type of this dashboard. Valid values are custom_timeboard, custom_screenboard, integration_screenboard, integration_timeboard, host_timeboard.
	// The type of this dashboard. Valid values are `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, `host_timeboard`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type DashboardListInitParameters struct {

	// (Block Set) A set of dashboard items that belong to this list (see below for nested schema)
	// A set of dashboard items that belong to this list
	DashItem []DashItemInitParameters `json:"dashItem,omitempty" tf:"dash_item,omitempty"`

	// (String) The name of the Dashboard List
	// The name of the Dashboard List
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DashboardListObservation struct {

	// (Block Set) A set of dashboard items that belong to this list (see below for nested schema)
	// A set of dashboard items that belong to this list
	DashItem []DashItemObservation `json:"dashItem,omitempty" tf:"dash_item,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the Dashboard List
	// The name of the Dashboard List
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DashboardListParameters struct {

	// (Block Set) A set of dashboard items that belong to this list (see below for nested schema)
	// A set of dashboard items that belong to this list
	// +kubebuilder:validation:Optional
	DashItem []DashItemParameters `json:"dashItem,omitempty" tf:"dash_item,omitempty"`

	// (String) The name of the Dashboard List
	// The name of the Dashboard List
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// DashboardListSpec defines the desired state of DashboardList
type DashboardListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardListParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DashboardListInitParameters `json:"initProvider,omitempty"`
}

// DashboardListStatus defines the observed state of DashboardList.
type DashboardListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DashboardList is the Schema for the DashboardLists API. Provides a Datadog dashboard_list resource. This can be used to create and manage Datadog Dashboard Lists and the individual dashboards within them.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type DashboardList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   DashboardListSpec   `json:"spec"`
	Status DashboardListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardListList contains a list of DashboardLists
type DashboardListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DashboardList `json:"items"`
}

// Repository type metadata.
var (
	DashboardList_Kind             = "DashboardList"
	DashboardList_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DashboardList_Kind}.String()
	DashboardList_KindAPIVersion   = DashboardList_Kind + "." + CRDGroupVersion.String()
	DashboardList_GroupVersionKind = CRDGroupVersion.WithKind(DashboardList_Kind)
)

func init() {
	SchemeBuilder.Register(&DashboardList{}, &DashboardListList{})
}
