// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BindingsInitParameters struct {

	// (Set of String) An array of principals. A principal is a subject or group of subjects. Each principal is formatted as type:id. Supported types: role and org. The org ID can be obtained through the api/v2/users API.
	// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
	// +listType=set
	Principals []*string `json:"principals,omitempty" tf:"principals,omitempty"`

	// policies/#supported-relations-for-resources
	// The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
	Relation *string `json:"relation,omitempty" tf:"relation,omitempty"`
}

type BindingsObservation struct {

	// (Set of String) An array of principals. A principal is a subject or group of subjects. Each principal is formatted as type:id. Supported types: role and org. The org ID can be obtained through the api/v2/users API.
	// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
	// +listType=set
	Principals []*string `json:"principals,omitempty" tf:"principals,omitempty"`

	// policies/#supported-relations-for-resources
	// The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
	Relation *string `json:"relation,omitempty" tf:"relation,omitempty"`
}

type BindingsParameters struct {

	// (Set of String) An array of principals. A principal is a subject or group of subjects. Each principal is formatted as type:id. Supported types: role and org. The org ID can be obtained through the api/v2/users API.
	// An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
	// +kubebuilder:validation:Optional
	// +listType=set
	Principals []*string `json:"principals" tf:"principals,omitempty"`

	// policies/#supported-relations-for-resources
	// The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
	// +kubebuilder:validation:Optional
	Relation *string `json:"relation" tf:"relation,omitempty"`
}

type RestrictionPolicyInitParameters struct {

	// (Block Set) (see below for nested schema)
	Bindings []BindingsInitParameters `json:"bindings,omitempty" tf:"bindings,omitempty"`

	// (String) Identifier for the resource, formatted as resource_type:resource_id.
	// Identifier for the resource, formatted as resource_type:resource_id.
	//
	// Note: Dashboards support is in private beta. Reach out to your Datadog contact or support to enable this.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`
}

type RestrictionPolicyObservation struct {

	// (Block Set) (see below for nested schema)
	Bindings []BindingsObservation `json:"bindings,omitempty" tf:"bindings,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Identifier for the resource, formatted as resource_type:resource_id.
	// Identifier for the resource, formatted as resource_type:resource_id.
	//
	// Note: Dashboards support is in private beta. Reach out to your Datadog contact or support to enable this.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`
}

type RestrictionPolicyParameters struct {

	// (Block Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Bindings []BindingsParameters `json:"bindings,omitempty" tf:"bindings,omitempty"`

	// (String) Identifier for the resource, formatted as resource_type:resource_id.
	// Identifier for the resource, formatted as resource_type:resource_id.
	//
	// Note: Dashboards support is in private beta. Reach out to your Datadog contact or support to enable this.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`
}

// RestrictionPolicySpec defines the desired state of RestrictionPolicy
type RestrictionPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RestrictionPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RestrictionPolicyInitParameters `json:"initProvider,omitempty"`
}

// RestrictionPolicyStatus defines the observed state of RestrictionPolicy.
type RestrictionPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RestrictionPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RestrictionPolicy is the Schema for the RestrictionPolicys API. Provides a Datadog RestrictionPolicy resource. This can be used to create and manage Datadog restriction policies.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type RestrictionPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceId) || (has(self.initProvider) && has(self.initProvider.resourceId))",message="spec.forProvider.resourceId is a required parameter"
	Spec   RestrictionPolicySpec   `json:"spec"`
	Status RestrictionPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RestrictionPolicyList contains a list of RestrictionPolicys
type RestrictionPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RestrictionPolicy `json:"items"`
}

// Repository type metadata.
var (
	RestrictionPolicy_Kind             = "RestrictionPolicy"
	RestrictionPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RestrictionPolicy_Kind}.String()
	RestrictionPolicy_KindAPIVersion   = RestrictionPolicy_Kind + "." + CRDGroupVersion.String()
	RestrictionPolicy_GroupVersionKind = CRDGroupVersion.WithKind(RestrictionPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&RestrictionPolicy{}, &RestrictionPolicyList{})
}
