/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LayoutInitParameters struct {

	// (Number) The height of the widget.
	// The height of the widget.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (Number) The width of the widget.
	// The width of the widget.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`

	// (Number) The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	// The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// (Number) The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	// The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type LayoutObservation struct {

	// (Number) The height of the widget.
	// The height of the widget.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (Number) The width of the widget.
	// The width of the widget.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`

	// (Number) The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	// The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// (Number) The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	// The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type LayoutParameters struct {

	// (Number) The height of the widget.
	// The height of the widget.
	// +kubebuilder:validation:Optional
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (Number) The width of the widget.
	// The width of the widget.
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`

	// (Number) The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	// The position of the widget on the x (horizontal) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Optional
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// (Number) The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	// The position of the widget on the y (vertical) axis. Should be greater than or equal to 0.
	// +kubebuilder:validation:Optional
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type PowerpackInitParameters struct {

	// (String) The description of the powerpack.
	// The description of the powerpack.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// form dashboard. (see below for nested schema)
	// The layout of the powerpack on a free-form dashboard.
	Layout []LayoutInitParameters `json:"layout,omitempty" tf:"layout,omitempty"`

	// (String) The timeframe to use when displaying the widget. Valid values are 1m, 5m, 10m, 15m, 30m, 1h, 4h, 1d, 2d, 1w, 1mo, 3mo, 6mo, week_to_date, month_to_date, 1y, alert.
	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// (String) The name for the powerpack.
	// The name for the powerpack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether or not title should be displayed in the powerpack.
	// Whether or not title should be displayed in the powerpack.
	ShowTitle *bool `json:"showTitle,omitempty" tf:"show_title,omitempty"`

	// (Set of String) List of tags to identify this powerpack.
	// List of tags to identify this powerpack.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List) The list of template variables for this powerpack. (see below for nested schema)
	// The list of template variables for this powerpack.
	TemplateVariables []TemplateVariablesInitParameters `json:"templateVariables,omitempty" tf:"template_variables,omitempty"`
}

type PowerpackObservation struct {

	// (String) The description of the powerpack.
	// The description of the powerpack.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// form dashboard. (see below for nested schema)
	// The layout of the powerpack on a free-form dashboard.
	Layout []LayoutObservation `json:"layout,omitempty" tf:"layout,omitempty"`

	// (String) The timeframe to use when displaying the widget. Valid values are 1m, 5m, 10m, 15m, 30m, 1h, 4h, 1d, 2d, 1w, 1mo, 3mo, 6mo, week_to_date, month_to_date, 1y, alert.
	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// (String) The name for the powerpack.
	// The name for the powerpack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether or not title should be displayed in the powerpack.
	// Whether or not title should be displayed in the powerpack.
	ShowTitle *bool `json:"showTitle,omitempty" tf:"show_title,omitempty"`

	// (Set of String) List of tags to identify this powerpack.
	// List of tags to identify this powerpack.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List) The list of template variables for this powerpack. (see below for nested schema)
	// The list of template variables for this powerpack.
	TemplateVariables []TemplateVariablesObservation `json:"templateVariables,omitempty" tf:"template_variables,omitempty"`
}

type PowerpackParameters struct {

	// (String) The description of the powerpack.
	// The description of the powerpack.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// form dashboard. (see below for nested schema)
	// The layout of the powerpack on a free-form dashboard.
	// +kubebuilder:validation:Optional
	Layout []LayoutParameters `json:"layout,omitempty" tf:"layout,omitempty"`

	// (String) The timeframe to use when displaying the widget. Valid values are 1m, 5m, 10m, 15m, 30m, 1h, 4h, 1d, 2d, 1w, 1mo, 3mo, 6mo, week_to_date, month_to_date, 1y, alert.
	// The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `week_to_date`, `month_to_date`, `1y`, `alert`.
	// +kubebuilder:validation:Optional
	LiveSpan *string `json:"liveSpan,omitempty" tf:"live_span,omitempty"`

	// (String) The name for the powerpack.
	// The name for the powerpack.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether or not title should be displayed in the powerpack.
	// Whether or not title should be displayed in the powerpack.
	// +kubebuilder:validation:Optional
	ShowTitle *bool `json:"showTitle,omitempty" tf:"show_title,omitempty"`

	// (Set of String) List of tags to identify this powerpack.
	// List of tags to identify this powerpack.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List) The list of template variables for this powerpack. (see below for nested schema)
	// The list of template variables for this powerpack.
	// +kubebuilder:validation:Optional
	TemplateVariables []TemplateVariablesParameters `json:"templateVariables,omitempty" tf:"template_variables,omitempty"`

	// (Block List) The list of widgets to display in the powerpack. (see below for nested schema)
	// (String) The JSON formatted definition of the list of widgets to display in the powerpack.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Widget *string `json:"widget,omitempty" tf:"-"`
}

type TemplateVariablesInitParameters struct {

	// (List of String) One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with OR.
	// One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with `OR`.
	Defaults []*string `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// (String) The name for the powerpack.
	// The name of the powerpack template variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TemplateVariablesObservation struct {

	// (List of String) One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with OR.
	// One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with `OR`.
	Defaults []*string `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// (String) The name for the powerpack.
	// The name of the powerpack template variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TemplateVariablesParameters struct {

	// (List of String) One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with OR.
	// One or many default values for powerpack template variables on load. If more than one default is specified, they will be unioned together with `OR`.
	// +kubebuilder:validation:Optional
	Defaults []*string `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// (String) The name for the powerpack.
	// The name of the powerpack template variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

// PowerpackSpec defines the desired state of Powerpack
type PowerpackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PowerpackParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PowerpackInitParameters `json:"initProvider,omitempty"`
}

// PowerpackStatus defines the observed state of Powerpack.
type PowerpackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PowerpackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Powerpack is the Schema for the Powerpacks API. Provides a Datadog powerpack resource. This can be used to create and manage Datadog powerpacks.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Powerpack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PowerpackSpec   `json:"spec"`
	Status            PowerpackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PowerpackList contains a list of Powerpacks
type PowerpackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Powerpack `json:"items"`
}

// Repository type metadata.
var (
	Powerpack_Kind             = "Powerpack"
	Powerpack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Powerpack_Kind}.String()
	Powerpack_KindAPIVersion   = Powerpack_Kind + "." + CRDGroupVersion.String()
	Powerpack_GroupVersionKind = CRDGroupVersion.WithKind(Powerpack_Kind)
)

func init() {
	SchemeBuilder.Register(&Powerpack{}, &PowerpackList{})
}
