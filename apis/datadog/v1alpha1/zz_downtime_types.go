/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DowntimeInitParameters struct {

	// (Number) Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
	// Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
	End *float64 `json:"end,omitempty" tf:"end,omitempty"`

	// (String) String representing date and time to end the downtime in RFC3339 format.
	// String representing date and time to end the downtime in RFC3339 format.
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// (String) An optional message to provide when creating the downtime, can include notification handles
	// An optional message to provide when creating the downtime, can include notification handles
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Number) When specified, this downtime will only apply to this monitor
	// When specified, this downtime will only apply to this monitor
	MonitorID *float64 `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// (Set of String) A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
	// A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
	// +listType=set
	MonitorTags []*string `json:"monitorTags,omitempty" tf:"monitor_tags,omitempty"`

	// (Boolean) When true the first recovery notification during the downtime will be muted Defaults to false.
	// When true the first recovery notification during the downtime will be muted Defaults to `false`.
	MuteFirstRecoveryNotification *bool `json:"muteFirstRecoveryNotification,omitempty" tf:"mute_first_recovery_notification,omitempty"`

	// (Block List, Max: 1) Optional recurring schedule for this downtime (see below for nested schema)
	// Optional recurring schedule for this downtime
	Recurrence []RecurrenceInitParameters `json:"recurrence,omitempty" tf:"recurrence,omitempty"`

	// (List of String) specify the group scope to which this downtime applies. For everything use '*'
	// specify the group scope to which this downtime applies. For everything use '*'
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Number) Specify when this downtime should start. Accepts a Unix timestamp in UTC.
	// Specify when this downtime should start. Accepts a Unix timestamp in UTC.
	Start *float64 `json:"start,omitempty" tf:"start,omitempty"`

	// (String) String representing date and time to start the downtime in RFC3339 format.
	// String representing date and time to start the downtime in RFC3339 format.
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// (String) The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to "UTC".
	// The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `"UTC"`.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type DowntimeObservation struct {

	// (Boolean) When true indicates this downtime is being actively applied
	// When true indicates this downtime is being actively applied
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Number) The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
	// The id corresponding to the downtime object definition of the active child for the original parent recurring downtime. This field will only exist on recurring downtimes.
	ActiveChildID *float64 `json:"activeChildId,omitempty" tf:"active_child_id,omitempty"`

	// (Boolean) When true indicates this downtime is not being applied
	// When true indicates this downtime is not being applied
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Number) Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
	// Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
	End *float64 `json:"end,omitempty" tf:"end,omitempty"`

	// (String) String representing date and time to end the downtime in RFC3339 format.
	// String representing date and time to end the downtime in RFC3339 format.
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) An optional message to provide when creating the downtime, can include notification handles
	// An optional message to provide when creating the downtime, can include notification handles
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Number) When specified, this downtime will only apply to this monitor
	// When specified, this downtime will only apply to this monitor
	MonitorID *float64 `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// (Set of String) A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
	// A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
	// +listType=set
	MonitorTags []*string `json:"monitorTags,omitempty" tf:"monitor_tags,omitempty"`

	// (Boolean) When true the first recovery notification during the downtime will be muted Defaults to false.
	// When true the first recovery notification during the downtime will be muted Defaults to `false`.
	MuteFirstRecoveryNotification *bool `json:"muteFirstRecoveryNotification,omitempty" tf:"mute_first_recovery_notification,omitempty"`

	// (Block List, Max: 1) Optional recurring schedule for this downtime (see below for nested schema)
	// Optional recurring schedule for this downtime
	Recurrence []RecurrenceObservation `json:"recurrence,omitempty" tf:"recurrence,omitempty"`

	// (List of String) specify the group scope to which this downtime applies. For everything use '*'
	// specify the group scope to which this downtime applies. For everything use '*'
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Number) Specify when this downtime should start. Accepts a Unix timestamp in UTC.
	// Specify when this downtime should start. Accepts a Unix timestamp in UTC.
	Start *float64 `json:"start,omitempty" tf:"start,omitempty"`

	// (String) String representing date and time to start the downtime in RFC3339 format.
	// String representing date and time to start the downtime in RFC3339 format.
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// (String) The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to "UTC".
	// The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `"UTC"`.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type DowntimeParameters struct {

	// (Number) Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
	// Optionally specify an end date when this downtime should expire. Accepts a Unix timestamp in UTC.
	// +kubebuilder:validation:Optional
	End *float64 `json:"end,omitempty" tf:"end,omitempty"`

	// (String) String representing date and time to end the downtime in RFC3339 format.
	// String representing date and time to end the downtime in RFC3339 format.
	// +kubebuilder:validation:Optional
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// (String) An optional message to provide when creating the downtime, can include notification handles
	// An optional message to provide when creating the downtime, can include notification handles
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Number) When specified, this downtime will only apply to this monitor
	// When specified, this downtime will only apply to this monitor
	// +kubebuilder:validation:Optional
	MonitorID *float64 `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// (Set of String) A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
	// A list of monitor tags (up to 32) to base the scheduled downtime on. Only monitors that have all selected tags are silenced
	// +kubebuilder:validation:Optional
	// +listType=set
	MonitorTags []*string `json:"monitorTags,omitempty" tf:"monitor_tags,omitempty"`

	// (Boolean) When true the first recovery notification during the downtime will be muted Defaults to false.
	// When true the first recovery notification during the downtime will be muted Defaults to `false`.
	// +kubebuilder:validation:Optional
	MuteFirstRecoveryNotification *bool `json:"muteFirstRecoveryNotification,omitempty" tf:"mute_first_recovery_notification,omitempty"`

	// (Block List, Max: 1) Optional recurring schedule for this downtime (see below for nested schema)
	// Optional recurring schedule for this downtime
	// +kubebuilder:validation:Optional
	Recurrence []RecurrenceParameters `json:"recurrence,omitempty" tf:"recurrence,omitempty"`

	// (List of String) specify the group scope to which this downtime applies. For everything use '*'
	// specify the group scope to which this downtime applies. For everything use '*'
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Number) Specify when this downtime should start. Accepts a Unix timestamp in UTC.
	// Specify when this downtime should start. Accepts a Unix timestamp in UTC.
	// +kubebuilder:validation:Optional
	Start *float64 `json:"start,omitempty" tf:"start,omitempty"`

	// (String) String representing date and time to start the downtime in RFC3339 format.
	// String representing date and time to start the downtime in RFC3339 format.
	// +kubebuilder:validation:Optional
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// (String) The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to "UTC".
	// The timezone for the downtime. Follows IANA timezone database identifiers. Defaults to `"UTC"`.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type RecurrenceInitParameters struct {

	// (Number) How often to repeat as an integer. For example to repeat every 3 days, select a type of days and a period of 3.
	// How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// (String) The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use FREQ=MONTHLY;INTERVAL=1. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, DTSTART, DTEND, DURATION). Only applicable when type is rrule.
	// The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). Only applicable when `type` is `rrule`.
	Rrule *string `json:"rrule,omitempty" tf:"rrule,omitempty"`

	// (String) One of days, weeks, months, years, or rrule.
	// One of `days`, `weeks`, `months`, `years`, or `rrule`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) The date at which the recurrence should end as a POSIX timestamp. until_occurrences and until_date are mutually exclusive.
	// The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
	UntilDate *float64 `json:"untilDate,omitempty" tf:"until_date,omitempty"`

	// (Number) How many times the downtime will be rescheduled. until_occurrences and until_date are mutually exclusive.
	// How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
	UntilOccurrences *float64 `json:"untilOccurrences,omitempty" tf:"until_occurrences,omitempty"`

	// (List of String) A list of week days to repeat on. Choose from: Mon, Tue, Wed, Thu, Fri, Sat or Sun. Only applicable when type is weeks. First letter must be capitalized.
	// A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
	WeekDays []*string `json:"weekDays,omitempty" tf:"week_days,omitempty"`
}

type RecurrenceObservation struct {

	// (Number) How often to repeat as an integer. For example to repeat every 3 days, select a type of days and a period of 3.
	// How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// (String) The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use FREQ=MONTHLY;INTERVAL=1. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, DTSTART, DTEND, DURATION). Only applicable when type is rrule.
	// The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). Only applicable when `type` is `rrule`.
	Rrule *string `json:"rrule,omitempty" tf:"rrule,omitempty"`

	// (String) One of days, weeks, months, years, or rrule.
	// One of `days`, `weeks`, `months`, `years`, or `rrule`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) The date at which the recurrence should end as a POSIX timestamp. until_occurrences and until_date are mutually exclusive.
	// The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
	UntilDate *float64 `json:"untilDate,omitempty" tf:"until_date,omitempty"`

	// (Number) How many times the downtime will be rescheduled. until_occurrences and until_date are mutually exclusive.
	// How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
	UntilOccurrences *float64 `json:"untilOccurrences,omitempty" tf:"until_occurrences,omitempty"`

	// (List of String) A list of week days to repeat on. Choose from: Mon, Tue, Wed, Thu, Fri, Sat or Sun. Only applicable when type is weeks. First letter must be capitalized.
	// A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
	WeekDays []*string `json:"weekDays,omitempty" tf:"week_days,omitempty"`
}

type RecurrenceParameters struct {

	// (Number) How often to repeat as an integer. For example to repeat every 3 days, select a type of days and a period of 3.
	// How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// (String) The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use FREQ=MONTHLY;INTERVAL=1. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, DTSTART, DTEND, DURATION). Only applicable when type is rrule.
	// The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). Only applicable when `type` is `rrule`.
	// +kubebuilder:validation:Optional
	Rrule *string `json:"rrule,omitempty" tf:"rrule,omitempty"`

	// (String) One of days, weeks, months, years, or rrule.
	// One of `days`, `weeks`, `months`, `years`, or `rrule`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (Number) The date at which the recurrence should end as a POSIX timestamp. until_occurrences and until_date are mutually exclusive.
	// The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
	// +kubebuilder:validation:Optional
	UntilDate *float64 `json:"untilDate,omitempty" tf:"until_date,omitempty"`

	// (Number) How many times the downtime will be rescheduled. until_occurrences and until_date are mutually exclusive.
	// How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
	// +kubebuilder:validation:Optional
	UntilOccurrences *float64 `json:"untilOccurrences,omitempty" tf:"until_occurrences,omitempty"`

	// (List of String) A list of week days to repeat on. Choose from: Mon, Tue, Wed, Thu, Fri, Sat or Sun. Only applicable when type is weeks. First letter must be capitalized.
	// A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
	// +kubebuilder:validation:Optional
	WeekDays []*string `json:"weekDays,omitempty" tf:"week_days,omitempty"`
}

// DowntimeSpec defines the desired state of Downtime
type DowntimeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DowntimeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DowntimeInitParameters `json:"initProvider,omitempty"`
}

// DowntimeStatus defines the observed state of Downtime.
type DowntimeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DowntimeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Downtime is the Schema for the Downtimes API. This resource is deprecated — use the datadog_downtime_schedule resource instead. Provides a Datadog downtime resource. This can be used to create and manage Datadog downtimes.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Downtime struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	Spec   DowntimeSpec   `json:"spec"`
	Status DowntimeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DowntimeList contains a list of Downtimes
type DowntimeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Downtime `json:"items"`
}

// Repository type metadata.
var (
	Downtime_Kind             = "Downtime"
	Downtime_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Downtime_Kind}.String()
	Downtime_KindAPIVersion   = Downtime_Kind + "." + CRDGroupVersion.String()
	Downtime_GroupVersionKind = CRDGroupVersion.WithKind(Downtime_Kind)
)

func init() {
	SchemeBuilder.Register(&Downtime{}, &DowntimeList{})
}
