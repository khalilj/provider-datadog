// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamLinkInitParameters struct {

	// (String) The link's label.
	// The link's label.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// (Number) The link's position, used to sort links for the team.
	// The link's position, used to sort links for the team.
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// (String) ID of the team the link is associated with.
	// ID of the team the link is associated with.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// (String) The URL for the link.
	// The URL for the link.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TeamLinkObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The link's label.
	// The link's label.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// (Number) The link's position, used to sort links for the team.
	// The link's position, used to sort links for the team.
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// (String) ID of the team the link is associated with.
	// ID of the team the link is associated with.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// (String) The URL for the link.
	// The URL for the link.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TeamLinkParameters struct {

	// (String) The link's label.
	// The link's label.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// (Number) The link's position, used to sort links for the team.
	// The link's position, used to sort links for the team.
	// +kubebuilder:validation:Optional
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// (String) ID of the team the link is associated with.
	// ID of the team the link is associated with.
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// (String) The URL for the link.
	// The URL for the link.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// TeamLinkSpec defines the desired state of TeamLink
type TeamLinkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamLinkParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TeamLinkInitParameters `json:"initProvider,omitempty"`
}

// TeamLinkStatus defines the observed state of TeamLink.
type TeamLinkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamLinkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TeamLink is the Schema for the TeamLinks API. Provides a Datadog TeamLink resource. This can be used to create and manage Datadog team_link.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type TeamLink struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.label) || (has(self.initProvider) && has(self.initProvider.label))",message="spec.forProvider.label is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.teamId) || (has(self.initProvider) && has(self.initProvider.teamId))",message="spec.forProvider.teamId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   TeamLinkSpec   `json:"spec"`
	Status TeamLinkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamLinkList contains a list of TeamLinks
type TeamLinkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamLink `json:"items"`
}

// Repository type metadata.
var (
	TeamLink_Kind             = "TeamLink"
	TeamLink_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamLink_Kind}.String()
	TeamLink_KindAPIVersion   = TeamLink_Kind + "." + CRDGroupVersion.String()
	TeamLink_GroupVersionKind = CRDGroupVersion.WithKind(TeamLink_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamLink{}, &TeamLinkList{})
}
