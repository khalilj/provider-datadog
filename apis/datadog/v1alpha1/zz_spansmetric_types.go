/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FilterInitParameters struct {

	// following the span search syntax. Defaults to "*".
	// The search query - following the span search syntax. Defaults to `"*"`.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type FilterObservation struct {

	// following the span search syntax. Defaults to "*".
	// The search query - following the span search syntax. Defaults to `"*"`.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type FilterParameters struct {

	// following the span search syntax. Defaults to "*".
	// The search query - following the span search syntax. Defaults to `"*"`.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type SpansMetricComputeInitParameters struct {

	// (String) The type of aggregation to use. This field can't be updated after creation.
	// The type of aggregation to use. This field can't be updated after creation.
	AggregationType *string `json:"aggregationType,omitempty" tf:"aggregation_type,omitempty"`

	// (Boolean) Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the aggregation_type is distribution.
	// Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the `aggregation_type` is `distribution`.
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the span-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type SpansMetricComputeObservation struct {

	// (String) The type of aggregation to use. This field can't be updated after creation.
	// The type of aggregation to use. This field can't be updated after creation.
	AggregationType *string `json:"aggregationType,omitempty" tf:"aggregation_type,omitempty"`

	// (Boolean) Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the aggregation_type is distribution.
	// Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the `aggregation_type` is `distribution`.
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the span-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type SpansMetricComputeParameters struct {

	// (String) The type of aggregation to use. This field can't be updated after creation.
	// The type of aggregation to use. This field can't be updated after creation.
	// +kubebuilder:validation:Optional
	AggregationType *string `json:"aggregationType" tf:"aggregation_type,omitempty"`

	// (Boolean) Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the aggregation_type is distribution.
	// Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the `aggregation_type` is `distribution`.
	// +kubebuilder:validation:Optional
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the span-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type SpansMetricGroupByInitParameters struct {

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the span-based metric will be aggregated over.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
	// Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type SpansMetricGroupByObservation struct {

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the span-based metric will be aggregated over.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
	// Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type SpansMetricGroupByParameters struct {

	// based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
	// The path to the value the span-based metric will be aggregated over.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// (String) Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
	// Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
	// +kubebuilder:validation:Optional
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type SpansMetricInitParameters struct {

	// (Block, Optional) (see below for nested schema)
	Compute *SpansMetricComputeInitParameters `json:"compute,omitempty" tf:"compute,omitempty"`

	// (Block, Optional) (see below for nested schema)
	Filter *FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block Set) (see below for nested schema)
	GroupBy []SpansMetricGroupByInitParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// based metric. This field can't be updated after creation.
	// The name of the span-based metric. This field can't be updated after creation.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SpansMetricObservation struct {

	// (Block, Optional) (see below for nested schema)
	Compute *SpansMetricComputeObservation `json:"compute,omitempty" tf:"compute,omitempty"`

	// (Block, Optional) (see below for nested schema)
	Filter *FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block Set) (see below for nested schema)
	GroupBy []SpansMetricGroupByObservation `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// based metric. This field can't be updated after creation.
	// The name of the span-based metric. This field can't be updated after creation.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SpansMetricParameters struct {

	// (Block, Optional) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Compute *SpansMetricComputeParameters `json:"compute,omitempty" tf:"compute,omitempty"`

	// (Block, Optional) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Filter *FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	GroupBy []SpansMetricGroupByParameters `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// based metric. This field can't be updated after creation.
	// The name of the span-based metric. This field can't be updated after creation.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// SpansMetricSpec defines the desired state of SpansMetric
type SpansMetricSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SpansMetricParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SpansMetricInitParameters `json:"initProvider,omitempty"`
}

// SpansMetricStatus defines the observed state of SpansMetric.
type SpansMetricStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SpansMetricObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SpansMetric is the Schema for the SpansMetrics API. Provides a Datadog SpansMetric resource. This can be used to create and manage Datadog spans_metric.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type SpansMetric struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compute) || (has(self.initProvider) && has(self.initProvider.compute))",message="spec.forProvider.compute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SpansMetricSpec   `json:"spec"`
	Status SpansMetricStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpansMetricList contains a list of SpansMetrics
type SpansMetricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SpansMetric `json:"items"`
}

// Repository type metadata.
var (
	SpansMetric_Kind             = "SpansMetric"
	SpansMetric_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SpansMetric_Kind}.String()
	SpansMetric_KindAPIVersion   = SpansMetric_Kind + "." + CRDGroupVersion.String()
	SpansMetric_GroupVersionKind = CRDGroupVersion.WithKind(SpansMetric_Kind)
)

func init() {
	SchemeBuilder.Register(&SpansMetric{}, &SpansMetricList{})
}
