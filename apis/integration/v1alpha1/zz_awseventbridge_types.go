// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AWSEventBridgeInitParameters struct {

	// (String) Your AWS Account ID without dashes.
	// Your AWS Account ID without dashes.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) True if Datadog should create the event bus in addition to the event source. Requires the events:CreateEventBus permission. Defaults to true.
	// True if Datadog should create the event bus in addition to the event source. Requires the `events:CreateEventBus` permission. Defaults to `true`.
	CreateEventBus *bool `json:"createEventBus,omitempty" tf:"create_event_bus,omitempty"`

	// (String) The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	// The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	EventGeneratorName *string `json:"eventGeneratorName,omitempty" tf:"event_generator_name,omitempty"`

	// (String) The event source's AWS region.
	// The event source's [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type AWSEventBridgeObservation struct {

	// (String) Your AWS Account ID without dashes.
	// Your AWS Account ID without dashes.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) True if Datadog should create the event bus in addition to the event source. Requires the events:CreateEventBus permission. Defaults to true.
	// True if Datadog should create the event bus in addition to the event source. Requires the `events:CreateEventBus` permission. Defaults to `true`.
	CreateEventBus *bool `json:"createEventBus,omitempty" tf:"create_event_bus,omitempty"`

	// (String) The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	// The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	EventGeneratorName *string `json:"eventGeneratorName,omitempty" tf:"event_generator_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The event source's AWS region.
	// The event source's [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type AWSEventBridgeParameters struct {

	// (String) Your AWS Account ID without dashes.
	// Your AWS Account ID without dashes.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) True if Datadog should create the event bus in addition to the event source. Requires the events:CreateEventBus permission. Defaults to true.
	// True if Datadog should create the event bus in addition to the event source. Requires the `events:CreateEventBus` permission. Defaults to `true`.
	// +kubebuilder:validation:Optional
	CreateEventBus *bool `json:"createEventBus,omitempty" tf:"create_event_bus,omitempty"`

	// (String) The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	// The given part of the event source name, which is then combined with an assigned suffix to form the full name.
	// +kubebuilder:validation:Optional
	EventGeneratorName *string `json:"eventGeneratorName,omitempty" tf:"event_generator_name,omitempty"`

	// (String) The event source's AWS region.
	// The event source's [AWS region](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// AWSEventBridgeSpec defines the desired state of AWSEventBridge
type AWSEventBridgeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AWSEventBridgeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AWSEventBridgeInitParameters `json:"initProvider,omitempty"`
}

// AWSEventBridgeStatus defines the observed state of AWSEventBridge.
type AWSEventBridgeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AWSEventBridgeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AWSEventBridge is the Schema for the AWSEventBridges API. Provides a Datadog - Amazon Web Services integration EventBridge resource. This can be used to create and manage Event Sources for each Datadog integrated AWS account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type AWSEventBridge struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventGeneratorName) || (has(self.initProvider) && has(self.initProvider.eventGeneratorName))",message="spec.forProvider.eventGeneratorName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   AWSEventBridgeSpec   `json:"spec"`
	Status AWSEventBridgeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AWSEventBridgeList contains a list of AWSEventBridges
type AWSEventBridgeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AWSEventBridge `json:"items"`
}

// Repository type metadata.
var (
	AWSEventBridge_Kind             = "AWSEventBridge"
	AWSEventBridge_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AWSEventBridge_Kind}.String()
	AWSEventBridge_KindAPIVersion   = AWSEventBridge_Kind + "." + CRDGroupVersion.String()
	AWSEventBridge_GroupVersionKind = CRDGroupVersion.WithKind(AWSEventBridge_Kind)
)

func init() {
	SchemeBuilder.Register(&AWSEventBridge{}, &AWSEventBridgeList{})
}
