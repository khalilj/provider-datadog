/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfluentResourceInitParameters struct {

	// (String) Confluent Account ID.
	// Confluent Account ID.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Enable the custom.consumer_lag_offset metric, which contains extra metric tags. Defaults to false.
	// Enable the `custom.consumer_lag_offset` metric, which contains extra metric tags. Defaults to `false`.
	EnableCustomMetrics *bool `json:"enableCustomMetrics,omitempty" tf:"enable_custom_metrics,omitempty"`

	// (String) The ID associated with a Confluent resource.
	// The ID associated with a Confluent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// (String) The resource type of the Resource. Can be kafka, connector, ksql, or schema_registry.
	// The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schema_registry`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// value pairs separated by a colon.
	// A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ConfluentResourceObservation struct {

	// (String) Confluent Account ID.
	// Confluent Account ID.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Enable the custom.consumer_lag_offset metric, which contains extra metric tags. Defaults to false.
	// Enable the `custom.consumer_lag_offset` metric, which contains extra metric tags. Defaults to `false`.
	EnableCustomMetrics *bool `json:"enableCustomMetrics,omitempty" tf:"enable_custom_metrics,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The ID associated with a Confluent resource.
	// The ID associated with a Confluent resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// (String) The resource type of the Resource. Can be kafka, connector, ksql, or schema_registry.
	// The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schema_registry`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// value pairs separated by a colon.
	// A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ConfluentResourceParameters struct {

	// (String) Confluent Account ID.
	// Confluent Account ID.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Enable the custom.consumer_lag_offset metric, which contains extra metric tags. Defaults to false.
	// Enable the `custom.consumer_lag_offset` metric, which contains extra metric tags. Defaults to `false`.
	// +kubebuilder:validation:Optional
	EnableCustomMetrics *bool `json:"enableCustomMetrics,omitempty" tf:"enable_custom_metrics,omitempty"`

	// (String) The ID associated with a Confluent resource.
	// The ID associated with a Confluent resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// (String) The resource type of the Resource. Can be kafka, connector, ksql, or schema_registry.
	// The resource type of the Resource. Can be `kafka`, `connector`, `ksql`, or `schema_registry`.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// value pairs separated by a colon.
	// A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ConfluentResourceSpec defines the desired state of ConfluentResource
type ConfluentResourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfluentResourceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfluentResourceInitParameters `json:"initProvider,omitempty"`
}

// ConfluentResourceStatus defines the observed state of ConfluentResource.
type ConfluentResourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfluentResourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConfluentResource is the Schema for the ConfluentResources API. Provides a Datadog IntegrationConfluentResource resource. This can be used to create and manage Datadog integrationconfluentresource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type ConfluentResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceId) || (has(self.initProvider) && has(self.initProvider.resourceId))",message="spec.forProvider.resourceId is a required parameter"
	Spec   ConfluentResourceSpec   `json:"spec"`
	Status ConfluentResourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfluentResourceList contains a list of ConfluentResources
type ConfluentResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfluentResource `json:"items"`
}

// Repository type metadata.
var (
	ConfluentResource_Kind             = "ConfluentResource"
	ConfluentResource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfluentResource_Kind}.String()
	ConfluentResource_KindAPIVersion   = ConfluentResource_Kind + "." + CRDGroupVersion.String()
	ConfluentResource_GroupVersionKind = CRDGroupVersion.WithKind(ConfluentResource_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfluentResource{}, &ConfluentResourceList{})
}
