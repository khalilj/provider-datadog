// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DisplayInitParameters struct {

	// (Boolean) Show the main body of the alert event. Defaults to true.
	// Show the main body of the alert event. Defaults to `true`.
	Message *bool `json:"message,omitempty" tf:"message,omitempty"`

	// handles in the alert event. Defaults to true.
	// Show the list of @-handles in the alert event. Defaults to `true`.
	Notified *bool `json:"notified,omitempty" tf:"notified,omitempty"`

	// (Boolean) Show the alert event's snapshot image. Defaults to true.
	// Show the alert event's snapshot image. Defaults to `true`.
	Snapshot *bool `json:"snapshot,omitempty" tf:"snapshot,omitempty"`

	// (Boolean) Show the scopes on which the monitor alerted. Defaults to true.
	// Show the scopes on which the monitor alerted. Defaults to `true`.
	Tags *bool `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DisplayObservation struct {

	// (Boolean) Show the main body of the alert event. Defaults to true.
	// Show the main body of the alert event. Defaults to `true`.
	Message *bool `json:"message,omitempty" tf:"message,omitempty"`

	// handles in the alert event. Defaults to true.
	// Show the list of @-handles in the alert event. Defaults to `true`.
	Notified *bool `json:"notified,omitempty" tf:"notified,omitempty"`

	// (Boolean) Show the alert event's snapshot image. Defaults to true.
	// Show the alert event's snapshot image. Defaults to `true`.
	Snapshot *bool `json:"snapshot,omitempty" tf:"snapshot,omitempty"`

	// (Boolean) Show the scopes on which the monitor alerted. Defaults to true.
	// Show the scopes on which the monitor alerted. Defaults to `true`.
	Tags *bool `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DisplayParameters struct {

	// (Boolean) Show the main body of the alert event. Defaults to true.
	// Show the main body of the alert event. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Message *bool `json:"message,omitempty" tf:"message,omitempty"`

	// handles in the alert event. Defaults to true.
	// Show the list of @-handles in the alert event. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Notified *bool `json:"notified,omitempty" tf:"notified,omitempty"`

	// (Boolean) Show the alert event's snapshot image. Defaults to true.
	// Show the alert event's snapshot image. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Snapshot *bool `json:"snapshot,omitempty" tf:"snapshot,omitempty"`

	// (Boolean) Show the scopes on which the monitor alerted. Defaults to true.
	// Show the scopes on which the monitor alerted. Defaults to `true`.
	// +kubebuilder:validation:Optional
	Tags *bool `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SlackChannelInitParameters struct {

	// (String) Slack account name.
	// Slack account name.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// (String) Slack channel name.
	// Slack channel name.
	ChannelName *string `json:"channelName,omitempty" tf:"channel_name,omitempty"`

	// (Block List, Min: 1, Max: 1) Configuration options for what is shown in an alert event message. (see below for nested schema)
	// Configuration options for what is shown in an alert event message.
	Display []DisplayInitParameters `json:"display,omitempty" tf:"display,omitempty"`
}

type SlackChannelObservation struct {

	// (String) Slack account name.
	// Slack account name.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// (String) Slack channel name.
	// Slack channel name.
	ChannelName *string `json:"channelName,omitempty" tf:"channel_name,omitempty"`

	// (Block List, Min: 1, Max: 1) Configuration options for what is shown in an alert event message. (see below for nested schema)
	// Configuration options for what is shown in an alert event message.
	Display []DisplayObservation `json:"display,omitempty" tf:"display,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SlackChannelParameters struct {

	// (String) Slack account name.
	// Slack account name.
	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// (String) Slack channel name.
	// Slack channel name.
	// +kubebuilder:validation:Optional
	ChannelName *string `json:"channelName,omitempty" tf:"channel_name,omitempty"`

	// (Block List, Min: 1, Max: 1) Configuration options for what is shown in an alert event message. (see below for nested schema)
	// Configuration options for what is shown in an alert event message.
	// +kubebuilder:validation:Optional
	Display []DisplayParameters `json:"display,omitempty" tf:"display,omitempty"`
}

// SlackChannelSpec defines the desired state of SlackChannel
type SlackChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SlackChannelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SlackChannelInitParameters `json:"initProvider,omitempty"`
}

// SlackChannelStatus defines the observed state of SlackChannel.
type SlackChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SlackChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SlackChannel is the Schema for the SlackChannels API. Resource for interacting with the Datadog Slack channel API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type SlackChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountName) || (has(self.initProvider) && has(self.initProvider.accountName))",message="spec.forProvider.accountName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.channelName) || (has(self.initProvider) && has(self.initProvider.channelName))",message="spec.forProvider.channelName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.display) || (has(self.initProvider) && has(self.initProvider.display))",message="spec.forProvider.display is a required parameter"
	Spec   SlackChannelSpec   `json:"spec"`
	Status SlackChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SlackChannelList contains a list of SlackChannels
type SlackChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SlackChannel `json:"items"`
}

// Repository type metadata.
var (
	SlackChannel_Kind             = "SlackChannel"
	SlackChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SlackChannel_Kind}.String()
	SlackChannel_KindAPIVersion   = SlackChannel_Kind + "." + CRDGroupVersion.String()
	SlackChannel_GroupVersionKind = CRDGroupVersion.WithKind(SlackChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&SlackChannel{}, &SlackChannelList{})
}
