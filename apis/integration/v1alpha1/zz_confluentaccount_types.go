// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfluentAccountInitParameters struct {

	// (String) The API key associated with your Confluent account.
	// The API key associated with your Confluent account.
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// value pairs separated by a colon.
	// A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ConfluentAccountObservation struct {

	// (String) The API key associated with your Confluent account.
	// The API key associated with your Confluent account.
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// value pairs separated by a colon.
	// A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ConfluentAccountParameters struct {

	// (String) The API key associated with your Confluent account.
	// The API key associated with your Confluent account.
	// +kubebuilder:validation:Optional
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// (String, Sensitive) The API secret associated with your Confluent account.
	// The API secret associated with your Confluent account.
	// +kubebuilder:validation:Optional
	APISecretSecretRef v1.SecretKeySelector `json:"apiSecretSecretRef" tf:"-"`

	// value pairs separated by a colon.
	// A list of strings representing tags. Can be a single key, or key-value pairs separated by a colon.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ConfluentAccountSpec defines the desired state of ConfluentAccount
type ConfluentAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfluentAccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfluentAccountInitParameters `json:"initProvider,omitempty"`
}

// ConfluentAccountStatus defines the observed state of ConfluentAccount.
type ConfluentAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfluentAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConfluentAccount is the Schema for the ConfluentAccounts API. Provides a Datadog IntegrationConfluentAccount resource. This can be used to create and manage Datadog integrationconfluentaccount.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type ConfluentAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiKey) || (has(self.initProvider) && has(self.initProvider.apiKey))",message="spec.forProvider.apiKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiSecretSecretRef)",message="spec.forProvider.apiSecretSecretRef is a required parameter"
	Spec   ConfluentAccountSpec   `json:"spec"`
	Status ConfluentAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfluentAccountList contains a list of ConfluentAccounts
type ConfluentAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfluentAccount `json:"items"`
}

// Repository type metadata.
var (
	ConfluentAccount_Kind             = "ConfluentAccount"
	ConfluentAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfluentAccount_Kind}.String()
	ConfluentAccount_KindAPIVersion   = ConfluentAccount_Kind + "." + CRDGroupVersion.String()
	ConfluentAccount_GroupVersionKind = CRDGroupVersion.WithKind(ConfluentAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfluentAccount{}, &ConfluentAccountList{})
}
