/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupOrderInitParameters struct {

	// (List of String) The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	// The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`
}

type GroupOrderObservation struct {

	// (List of String) The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	// The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupOrderParameters struct {

	// (List of String) The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	// The list of Sensitive Data Scanner group IDs, in order. Logs are tested against the query filter of each index one by one following the order of the list.
	// +kubebuilder:validation:Optional
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`
}

// GroupOrderSpec defines the desired state of GroupOrder
type GroupOrderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupOrderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupOrderInitParameters `json:"initProvider,omitempty"`
}

// GroupOrderStatus defines the observed state of GroupOrder.
type GroupOrderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupOrderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupOrder is the Schema for the GroupOrders API. Provides a Datadog Sensitive Data Scanner Group Order API resource. This can be used to manage the order of Datadog Sensitive Data Scanner Groups.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type GroupOrder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupIds) || (has(self.initProvider) && has(self.initProvider.groupIds))",message="spec.forProvider.groupIds is a required parameter"
	Spec   GroupOrderSpec   `json:"spec"`
	Status GroupOrderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupOrderList contains a list of GroupOrders
type GroupOrderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupOrder `json:"items"`
}

// Repository type metadata.
var (
	GroupOrder_Kind             = "GroupOrder"
	GroupOrder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupOrder_Kind}.String()
	GroupOrder_KindAPIVersion   = GroupOrder_Kind + "." + CRDGroupVersion.String()
	GroupOrder_GroupVersionKind = CRDGroupVersion.WithKind(GroupOrder_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupOrder{}, &GroupOrderList{})
}
