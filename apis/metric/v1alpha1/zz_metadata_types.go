/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MetadataInitParameters struct {

	// (String) A description of the metric.
	// A description of the metric.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name of the metric.
	// The name of the metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) Per unit of the metric such as second in bytes per second.
	// Per unit of the metric such as `second` in `bytes per second`.
	PerUnit *string `json:"perUnit,omitempty" tf:"per_unit,omitempty"`

	// (String) A short name of the metric.
	// A short name of the metric.
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`

	// (Number) If applicable, statsd flush interval in seconds for the metric.
	// If applicable, statsd flush interval in seconds for the metric.
	StatsdInterval *float64 `json:"statsdInterval,omitempty" tf:"statsd_interval,omitempty"`

	// (String) Metric type such as count, gauge, or rate. Updating a metric of type distribution is not supported. If you would like to see the distribution type returned, contact Datadog support.
	// Metric type such as `count`, `gauge`, or `rate`. Updating a metric of type `distribution` is not supported. If you would like to see the `distribution` type returned, contact [Datadog support](https://docs.datadoghq.com/help/).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Primary unit of the metric such as byte or operation.
	// Primary unit of the metric such as `byte` or `operation`.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetadataObservation struct {

	// (String) A description of the metric.
	// A description of the metric.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the metric.
	// The name of the metric.
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) Per unit of the metric such as second in bytes per second.
	// Per unit of the metric such as `second` in `bytes per second`.
	PerUnit *string `json:"perUnit,omitempty" tf:"per_unit,omitempty"`

	// (String) A short name of the metric.
	// A short name of the metric.
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`

	// (Number) If applicable, statsd flush interval in seconds for the metric.
	// If applicable, statsd flush interval in seconds for the metric.
	StatsdInterval *float64 `json:"statsdInterval,omitempty" tf:"statsd_interval,omitempty"`

	// (String) Metric type such as count, gauge, or rate. Updating a metric of type distribution is not supported. If you would like to see the distribution type returned, contact Datadog support.
	// Metric type such as `count`, `gauge`, or `rate`. Updating a metric of type `distribution` is not supported. If you would like to see the `distribution` type returned, contact [Datadog support](https://docs.datadoghq.com/help/).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Primary unit of the metric such as byte or operation.
	// Primary unit of the metric such as `byte` or `operation`.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type MetadataParameters struct {

	// (String) A description of the metric.
	// A description of the metric.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name of the metric.
	// The name of the metric.
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) Per unit of the metric such as second in bytes per second.
	// Per unit of the metric such as `second` in `bytes per second`.
	// +kubebuilder:validation:Optional
	PerUnit *string `json:"perUnit,omitempty" tf:"per_unit,omitempty"`

	// (String) A short name of the metric.
	// A short name of the metric.
	// +kubebuilder:validation:Optional
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`

	// (Number) If applicable, statsd flush interval in seconds for the metric.
	// If applicable, statsd flush interval in seconds for the metric.
	// +kubebuilder:validation:Optional
	StatsdInterval *float64 `json:"statsdInterval,omitempty" tf:"statsd_interval,omitempty"`

	// (String) Metric type such as count, gauge, or rate. Updating a metric of type distribution is not supported. If you would like to see the distribution type returned, contact Datadog support.
	// Metric type such as `count`, `gauge`, or `rate`. Updating a metric of type `distribution` is not supported. If you would like to see the `distribution` type returned, contact [Datadog support](https://docs.datadoghq.com/help/).
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Primary unit of the metric such as byte or operation.
	// Primary unit of the metric such as `byte` or `operation`.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

// MetadataSpec defines the desired state of Metadata
type MetadataSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MetadataParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MetadataInitParameters `json:"initProvider,omitempty"`
}

// MetadataStatus defines the observed state of Metadata.
type MetadataStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MetadataObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Metadata is the Schema for the Metadatas API. Provides a Datadog metric_metadata resource. This can be used to manage a metric's metadata.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Metadata struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metric) || (has(self.initProvider) && has(self.initProvider.metric))",message="spec.forProvider.metric is a required parameter"
	Spec   MetadataSpec   `json:"spec"`
	Status MetadataStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetadataList contains a list of Metadatas
type MetadataList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Metadata `json:"items"`
}

// Repository type metadata.
var (
	Metadata_Kind             = "Metadata"
	Metadata_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Metadata_Kind}.String()
	Metadata_KindAPIVersion   = Metadata_Kind + "." + CRDGroupVersion.String()
	Metadata_GroupVersionKind = CRDGroupVersion.WithKind(Metadata_Kind)
)

func init() {
	SchemeBuilder.Register(&Metadata{}, &MetadataList{})
}
