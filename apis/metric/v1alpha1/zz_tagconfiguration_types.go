/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AggregationsInitParameters struct {

	// (String) A space aggregation for use in query. Valid values are avg, max, min, sum.
	// A space aggregation for use in query. Valid values are `avg`, `max`, `min`, `sum`.
	Space *string `json:"space,omitempty" tf:"space,omitempty"`

	// (String) A time aggregation for use in query. Valid values are avg, count, max, min, sum.
	// A time aggregation for use in query. Valid values are `avg`, `count`, `max`, `min`, `sum`.
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type AggregationsObservation struct {

	// (String) A space aggregation for use in query. Valid values are avg, max, min, sum.
	// A space aggregation for use in query. Valid values are `avg`, `max`, `min`, `sum`.
	Space *string `json:"space,omitempty" tf:"space,omitempty"`

	// (String) A time aggregation for use in query. Valid values are avg, count, max, min, sum.
	// A time aggregation for use in query. Valid values are `avg`, `count`, `max`, `min`, `sum`.
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type AggregationsParameters struct {

	// (String) A space aggregation for use in query. Valid values are avg, max, min, sum.
	// A space aggregation for use in query. Valid values are `avg`, `max`, `min`, `sum`.
	// +kubebuilder:validation:Optional
	Space *string `json:"space" tf:"space,omitempty"`

	// (String) A time aggregation for use in query. Valid values are avg, count, max, min, sum.
	// A time aggregation for use in query. Valid values are `avg`, `count`, `max`, `min`, `sum`.
	// +kubebuilder:validation:Optional
	Time *string `json:"time" tf:"time,omitempty"`
}

type TagConfigurationInitParameters struct {

	// (Block Set) A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a metric_type of count, rate, or gauge. (see below for nested schema)
	// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
	Aggregations []AggregationsInitParameters `json:"aggregations,omitempty" tf:"aggregations,omitempty"`

	// (Boolean) Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to false.
	// Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
	ExcludeTagsMode *bool `json:"excludeTagsMode,omitempty" tf:"exclude_tags_mode,omitempty"`

	// (Boolean) Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a metric_type of distribution.
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// (String) The metric name for this resource.
	// The metric name for this resource.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// (String) The metric's type. This field can't be updated after creation. Valid values are gauge, count, rate, distribution.
	// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// (Set of String) A list of tag keys that will be queryable for your metric.
	// A list of tag keys that will be queryable for your metric.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagConfigurationObservation struct {

	// (Block Set) A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a metric_type of count, rate, or gauge. (see below for nested schema)
	// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
	Aggregations []AggregationsObservation `json:"aggregations,omitempty" tf:"aggregations,omitempty"`

	// (Boolean) Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to false.
	// Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
	ExcludeTagsMode *bool `json:"excludeTagsMode,omitempty" tf:"exclude_tags_mode,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a metric_type of distribution.
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// (String) The metric name for this resource.
	// The metric name for this resource.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// (String) The metric's type. This field can't be updated after creation. Valid values are gauge, count, rate, distribution.
	// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// (Set of String) A list of tag keys that will be queryable for your metric.
	// A list of tag keys that will be queryable for your metric.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagConfigurationParameters struct {

	// (Block Set) A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a metric_type of count, rate, or gauge. (see below for nested schema)
	// A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and gauge metrics require the (time: avg, space: avg) aggregation. Can only be applied to metrics that have a `metric_type` of count, rate, or gauge.
	// +kubebuilder:validation:Optional
	Aggregations []AggregationsParameters `json:"aggregations,omitempty" tf:"aggregations,omitempty"`

	// (Boolean) Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to false.
	// Toggle to include/exclude tags as queryable for your metric. Can only be applied to metrics that have one or more tags configured. Defaults to `false`.
	// +kubebuilder:validation:Optional
	ExcludeTagsMode *bool `json:"excludeTagsMode,omitempty" tf:"exclude_tags_mode,omitempty"`

	// (Boolean) Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a metric_type of distribution.
	// Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of distribution.
	// +kubebuilder:validation:Optional
	IncludePercentiles *bool `json:"includePercentiles,omitempty" tf:"include_percentiles,omitempty"`

	// (String) The metric name for this resource.
	// The metric name for this resource.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// (String) The metric's type. This field can't be updated after creation. Valid values are gauge, count, rate, distribution.
	// The metric's type. This field can't be updated after creation. Valid values are `gauge`, `count`, `rate`, `distribution`.
	// +kubebuilder:validation:Optional
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// (Set of String) A list of tag keys that will be queryable for your metric.
	// A list of tag keys that will be queryable for your metric.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// TagConfigurationSpec defines the desired state of TagConfiguration
type TagConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TagConfigurationInitParameters `json:"initProvider,omitempty"`
}

// TagConfigurationStatus defines the observed state of TagConfiguration.
type TagConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TagConfiguration is the Schema for the TagConfigurations API. Provides a Datadog metric tag configuration resource. This can be used to modify tag configurations for metrics.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type TagConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricName) || (has(self.initProvider) && has(self.initProvider.metricName))",message="spec.forProvider.metricName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricType) || (has(self.initProvider) && has(self.initProvider.metricType))",message="spec.forProvider.metricType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tags) || (has(self.initProvider) && has(self.initProvider.tags))",message="spec.forProvider.tags is a required parameter"
	Spec   TagConfigurationSpec   `json:"spec"`
	Status TagConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagConfigurationList contains a list of TagConfigurations
type TagConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagConfiguration `json:"items"`
}

// Repository type metadata.
var (
	TagConfiguration_Kind             = "TagConfiguration"
	TagConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagConfiguration_Kind}.String()
	TagConfiguration_KindAPIVersion   = TagConfiguration_Kind + "." + CRDGroupVersion.String()
	TagConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(TagConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&TagConfiguration{}, &TagConfigurationList{})
}
